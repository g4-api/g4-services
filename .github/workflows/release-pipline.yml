# Workflow to build, test, and release OcrInspector for production
name: Build, Test & Release G4™ API

# Define permissions for the workflow
permissions:
  contents: write
  checks: write
  pull-requests: write
  statuses: write

# Trigger the workflow on push to the development branch
on:
  push:
    branches:
      - development

# Set environment variables
env:
  artifactPublishDirectory: ${{ github.workspace }}/artifact_publish
  artifactStagingDirectory: ${{ github.workspace }}/artifact_staging
  artifactType: 'Production'
  binariesDirectory: ${{ github.workspace }}/binaries
  buildConfiguration: 'Release'
  buildPlatform: 'any cpu'

jobs:
  new-version:
    name: New Version
    runs-on: ubuntu-latest
    outputs:
      buildVersion: ${{ steps.parse-version.outputs.version }}
      validVersion: ${{ steps.validate-version.outputs.valid }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Parse Build Version for GitHub Tag
      id: parse-version
      shell: pwsh
      run: echo "version=$(Get-Date -UFormat '%Y.%m.%d').${{ github.run_number }}" >> $env:GITHUB_OUTPUT

    - name: Validate Version ${{ steps.parse-version.outputs.version }}
      id: validate-version
      shell: pwsh
      run: |
        $version = "${{ steps.parse-version.outputs.version }}"
        echo "valid=$($version -match '^\d+(\.\d+){3}$')" >> $env:GITHUB_OUTPUT

  invoke-api-tests:
    name: G4™ API - Docker Deployment & Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Workflow Repository
        uses: actions/checkout@v4

      - name: Build G4 Services Hub Docker Image
        run: docker build -f ./docker/G4.Services.Hub.Dockerfile -t g4-services-hub .

      - name: Run G4 Services Hub Docker Container
        run: docker run --rm --network=host -d -p 9944:9944 --name g4-container g4-services-hub

      - name: Verify Service Readiness
        shell: pwsh
        run: |
          $url = "http://localhost:9944/api/v4/g4/ping"
          $timeout = 15 # Timeout in seconds
          $startTime = Get-Date

          while ($true) {
              try {
                  # Send GET request and capture the status code
                  $response = Invoke-WebRequest -Uri $url -UseBasicParsing -ErrorAction Stop
                  $statusCode = $response.StatusCode
              } catch {
                  $statusCode = 0
              }

              # Break the loop if the status code is 200
              if ($statusCode -eq 200) {
                  Write-Host "Service is ready with status code 200!"
                  break
              }

              # Check if the timeout has been reached
              $elapsedTime = (Get-Date) - $startTime
              if ($elapsedTime.TotalSeconds -ge $timeout) {
                  Write-Host "Timeout reached. Service is not ready."
                  exit 1
              }

              # Wait before retrying
              Write-Host "Waiting for service to be ready... Status code: $statusCode"
              Start-Sleep -Seconds 1
          }

      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: g4-api/g4-external-python
          ref: main

      - name: Build Flask API Docker Image
        run: docker build -t flask-service ./src

      - name: Run Flask API Docker Container
        run: docker run --rm --network=host -d -p 9999:9999 --name flask-container flask-service

      - name: Verify Service Readiness
        shell: pwsh
        run: |
          $url = "http://localhost:9999/api/v4/g4/plugins"
          $timeout = 15 # Timeout in seconds
          $startTime = Get-Date

          while ($true) {
              try {
                  # Send GET request and capture the status code
                  $response = Invoke-WebRequest -Uri $url -UseBasicParsing -ErrorAction Stop
                  $statusCode = $response.StatusCode
              } catch {
                  $statusCode = 0
              }

              # Break the loop if the status code is 200
              if ($statusCode -eq 200) {
                  Write-Host "Service is ready with status code 200!"
                  break
              }

              # Check if the timeout has been reached
              $elapsedTime = (Get-Date) - $startTime
              if ($elapsedTime.TotalSeconds -ge $timeout) {
                  Write-Host "Timeout reached. Service is not ready."
                  exit 1
              }

              # Wait before retrying
              Write-Host "Waiting for service to be ready... Status code: $statusCode"
              Start-Sleep -Seconds 1
          }

      - name: Checkout Workflow Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install Newman
        run: npm install -g newman

      - name: Replace Tokens in Collection
        shell: pwsh
        env:
          G4_ENDPOINT: http://localhost:9944/api/v4/g4
          G4_EXTERNAL_ENDPOINT: http://localhost:9999
          G4_USERNAME: ${{ secrets.G4_API_KEY }}
          GRID_ENDPOINT: ${{ secrets.GRID_ENDPOINT }}

        run: |
          # Define the collection file path
          $collectionFile = "./postman/G4.Services.json"

          # Read the file content
          $content = Get-Content $collectionFile

          # Replace placeholders with secrets
          $content = $content -replace '\$\(G4\.Endpoint\)', "$env:G4_ENDPOINT"
          $content = $content -replace '\$\(G4\.Username\)', "$env:G4_USERNAME"
          $content = $content -replace '\$\(G4\.ExternalEndpoint\)', "$env:G4_EXTERNAL_ENDPOINT"
          $content = $content -replace '\$\(Grid\.Endpoint\)', "$env:GRID_ENDPOINT"

          # Write the updated content back to the file
          Set-Content -Path $collectionFile -Value $content

      - name: Run Postman Collection
        run: |
          newman run ./postman/G4.Services.json \
            --delay-request 500 \
            --reporters cli,junit \
            --reporter-junit-export ./test-results.xml

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: postman-test-results
          path: "./test-results.xml"

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: G4™ API - Integration Tests Results
          files: |
            test-results.xml

  publish-hub-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    if: ${{ needs.new-version.result == 'success' && needs.new-version.outputs.validVersion == 'True' && needs.invoke-api-tests.result == 'success' }}
    needs:
      - invoke-api-tests
      - new-version

    env:
      buildVersion: ${{ needs.new-version.outputs.buildVersion }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run:  echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -f ./docker/G4.Services.Hub.Dockerfile -t g4api/g4-hub:latest -t g4api/g4-hub:${{ env.buildVersion }} .

      - name: Push Docker Image 'latest'
        run: docker push g4api/g4-hub:latest

      - name: Push Docker Image '${{ env.buildVersion }}'
        run: docker push g4api/g4-hub:${{ env.buildVersion }}

  publish-hub-standalone:
    name: Publish Standalone Services
    runs-on: ubuntu-latest
    if: ${{ needs.new-version.result == 'success' && needs.new-version.outputs.validVersion == 'True' && needs.invoke-api-tests.result == 'success' }}
    needs:
      - invoke-api-tests
      - new-version

    env:
      buildVersion: ${{ needs.new-version.outputs.buildVersion }}

    steps:
      - name: Checkout Workflow Repository
        uses: actions/checkout@v4

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8

      - name: Publish
        shell: pwsh
        run: dotnet publish -o ${{ env.artifactPublishDirectory }} -c Release
  
      - name: Create Build Artifact
        shell: pwsh
        run: |
          New-Item -Path "${{ env.artifactStagingDirectory }}" -ItemType Directory
          Compress-Archive `
              -Path ${{ env.artifactPublishDirectory }}/* `
              -DestinationPath ${{ env.artifactStagingDirectory }}/g4-services-hub.v${{ env.buildVersion }}-win-linux-osx-x64.zip
  
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: drop
          path: ${{ env.artifactStagingDirectory }}/*.zip
  