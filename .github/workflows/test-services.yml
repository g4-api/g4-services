# Workflow to build, test, and release OcrInspector for production
name: Build, Test, & Release

# Define permissions for the workflow
permissions:
  contents: write
  checks: write
  pull-requests: write
  statuses: write

# Trigger the workflow on push to the development branch
on:
  push:
    branches:
      - development

jobs:
  run-api-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Workflow Repository
        uses: actions/checkout@v3

      - name: Build G4 Services Hub Docker Image
        run: |
          docker build -f ./docker/G4.Services.Hub.Dockerfile -t g4-services-hub .

      - name: Run G4 Services Hub Docker Container
        run: |
          docker run -d -e HOST_URL=http://host.docker.internal:9999 -p 9944:9944 --name g4-container g4-services-hub

      - name: Verify Service Readiness
        shell: pwsh
        run: |
          $url = "http://localhost:9944/api/v4/g4/ping"
          $timeout = 15 # Timeout in seconds
          $startTime = Get-Date

          while ($true) {
              try {
                  # Send GET request and capture the status code
                  $response = Invoke-WebRequest -Uri $url -UseBasicParsing -ErrorAction Stop
                  $statusCode = $response.StatusCode
              } catch {
                  $statusCode = 0
              }

              # Break the loop if the status code is 200
              if ($statusCode -eq 200) {
                  Write-Host "Service is ready with status code 200!"
                  break
              }

              # Check if the timeout has been reached
              $elapsedTime = (Get-Date) - $startTime
              if ($elapsedTime.TotalSeconds -ge $timeout) {
                  Write-Host "Timeout reached. Service is not ready."
                  exit 1
              }

              # Wait before retrying
              Write-Host "Waiting for service to be ready... Status code: $statusCode"
              Start-Sleep -Seconds 1
          }

      - name: Checkout Target Repository
        uses: actions/checkout@v3
        with:
          repository: g4-api/g4-external-python
          ref: main

      - name: List Current Directory
        run: ls -la

      - name: Build Flask API Docker Image
        run: |
          docker build -t flask-service ./src

      - name: Run Flask API Docker Container
        run: |
          docker run -d -p 9999:9999 --name flask-container flask-service

      - name: Verify Service Readiness
        shell: pwsh
        run: |
          $url = "http://localhost:9999/api/v4/g4/plugins"
          $timeout = 15 # Timeout in seconds
          $startTime = Get-Date

          while ($true) {
              try {
                  # Send GET request and capture the status code
                  $response = Invoke-WebRequest -Uri $url -UseBasicParsing -ErrorAction Stop
                  $statusCode = $response.StatusCode
              } catch {
                  $statusCode = 0
              }

              # Break the loop if the status code is 200
              if ($statusCode -eq 200) {
                  Write-Host "Service is ready with status code 200!"
                  break
              }

              # Check if the timeout has been reached
              $elapsedTime = (Get-Date) - $startTime
              if ($elapsedTime.TotalSeconds -ge $timeout) {
                  Write-Host "Timeout reached. Service is not ready."
                  exit 1
              }

              # Wait before retrying
              Write-Host "Waiting for service to be ready... Status code: $statusCode"
              Start-Sleep -Seconds 1
          }

      - name: Checkout Workflow Repository
        uses: actions/checkout@v3

      - name: Set Up Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Newman
        run: npm install -g newman

      - name: Replace Tokens in Collection
        shell: pwsh
        env:
          G4_ENDPOINT: http://localhost:9944/api/v4/g4
          G4_EXTERNAL_ENDPOINT: http://host.docker.internal:9999
          G4_USERNAME: ${{ secrets.G4_API_KEY }}
          GRID_ENDPOINT: ${{ secrets.GRID_ENDPOINT }}
        run: |
          # Define the collection file path
          $collectionFile = "./postman/G4.Services.json"

          # Read the file content
          $content = Get-Content $collectionFile

          # Replace placeholders with secrets
          $content = $content -replace '\$\(G4\.Endpoint\)', "$env:G4_ENDPOINT"
          $content = $content -replace '\$\(G4\.Username\)', "$env:G4_USERNAME"
          $content = $content -replace '\$\(G4\.ExternalEndpoint\)', "$env:G4_EXTERNAL_ENDPOINT"
          $content = $content -replace '\$\(Grid\.Endpoint\)', "$env:GRID_ENDPOINT"

          # Write the updated content back to the file
          Set-Content -Path $collectionFile -Value $content

          Write-Host "Tokens replaced successfully!"
          Write-Host "G4 Endpoint: $env:G4_ENDPOINT"
          Write-Host "G4 External Endpoint: $env:G4_EXTERNAL_ENDPOINT"
          Write-Host "G4 Username: $env:G4_USERNAME"
          Write-Host "Grid Endpoint: $env:GRID_ENDPOINT"
          Write-Host "Collection File: $collectionFile"
          Write-Host "Content: $content"

      - name: Run Postman Collection
        run: |
          newman run ./postman/G4.Services.json \
            --delay-request 500 \
            --reporters cli
