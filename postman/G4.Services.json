{
	"info": {
		"_postman_id": "7c3561b2-fc3a-4f71-81c8-4e3bb4910c50",
		"name": "G4 API Reference Guide v4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4883021"
	},
	"item": [
		{
			"name": "Collection Setup",
			"item": [
				{
					"name": "Setup Parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//-- [ G4 Settings ]-----------------------------------\r",
									"//-- This section sets up the G4 application\r",
									"//-- settings, including API credentials and endpoint.\r",
									"//-----------------------------------------------------\r",
									"pm.collectionVariables.set('ApiPassword', '');\r",
									"pm.collectionVariables.set('ApiUser', '$(G4.Username)');\r",
									"pm.collectionVariables.set('Endpoint', '$(G4.Endpoint)",
									"pm.collectionVariables.set('ExternalEndpoint', '$(G4.ExternalEndpoint)');\r",
									"pm.collectionVariables.set('MaxParallel', 1);\r",
									"\r",
									"//-- [ Driver Settings ]-------------------------------\r",
									"//-- This section configures the WebDriver\r",
									"//-- settings, including driver binaries and hubs.\r",
									"//-----------------------------------------------------\r",
									"pm.collectionVariables.set('DriverBinaries', '$(Grid.Endpoint)');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/ping",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Environments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Templates",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Documentation Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"DocumentationParameter1\": \"Foo Bar After Update\",\r\n    \"DocumentationParameter2\": \"1\",\r\n    \"DocumentationParameter3\": \"false\",\r\n    \"DocumentationParameter4\": \"0.5%\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/DocumentationEnvironment",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"DocumentationEnvironment"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Template - TestTemplate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aliases\":[\r\n        \"Test2\"\r\n    ],\r\n    \"author\": {\r\n        \"link\": \"https://www.linkedin.com/in/roei-sabag-247aa18/\",\r\n        \"name\": \"Roei Sabag\"\r\n    },\r\n    \"categories\": [\r\n        \"UserInterface\",\r\n        \"Authentication\"\r\n    ],\r\n    \"source\": \"Template\",\r\n    \"description\": [\r\n        \"### Purpose\",\r\n        \"\",\r\n        \"The `Login` plugin is designed to automate the process of logging into a web application by interacting with the necessary username and password fields and clicking the login button.\",\r\n        \"\",\r\n        \"### Key Features and Functionality\",\r\n        \"\",\r\n        \"| Feature                 | Description                                                                                            |\",\r\n        \"|-------------------------|--------------------------------------------------------------------------------------------------------|\",\r\n        \"| Dynamic Field Detection | Automatically locates the username, password fields, and login button based on provided locators.      |\",\r\n        \"| Secure Input Handling   | Ensures secure handling of sensitive data like passwords during automation workflows.                  |\",\r\n        \"| Error Handling          | Incorporates error handling to manage exceptions, such as incorrect login details or missing elements. |\",\r\n        \"\",\r\n        \"### Usages in RPA\",\r\n        \"\",\r\n        \"| Usage                | Description                                                                                                     |\",\r\n        \"|----------------------|-----------------------------------------------------------------------------------------------------------------|\",\r\n        \"| Web Login Automation | Automates the login process by filling in the username and password fields and clicking the login button.       |\",\r\n        \"| Form Submission      | Automates the submission of login forms in web applications.                                                    |\",\r\n        \"| Error Handling       | Detects and handles scenarios where the login process fails, such as incorrect credentials or missing elements. |\"\r\n    ],\r\n    \"examples\": [\r\n        {\r\n            \"description\": [\r\n                \"Perform a login action by sending the username and password to the respective input fields and clicking the login button.\"\r\n            ],\r\n            \"rule\": {\r\n                \"$type\": \"Action\",\r\n                \"pluginName\": \"Login\",\r\n                \"argument\": \"{{$ --Username:Foo --Password:bar}}\"\r\n            }\r\n        }\r\n    ],\r\n    \"key\": \"AnotherTemplate\",\r\n    \"manifestVersion\": 4,\r\n    \"parameters\": [\r\n        {\r\n            \"description\": [\r\n                \"Specifies the username that should be entered into the username input field during the login process.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Username\",\r\n            \"type\": \"String\"\r\n        },\r\n        {\r\n            \"description\": [\r\n                \"Specifies the password that should be entered into the password input field during the login process.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Password\",\r\n            \"type\": \"String\"\r\n        }\r\n    ],\r\n    \"pluginType\": \"Action\",\r\n    \"properties\": [\r\n        {\r\n            \"description\": [\r\n                \"Specifies the credentials used for logging in. The argument accepts both the username and password in the format '@Username' and '@Password'.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Argument\",\r\n            \"type\": \"String|Expression\"\r\n        }\r\n    ],\r\n    \"rules\": [\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#usernameField\",\r\n            \"pluginName\": \"SendKeys\",\r\n            \"argument\": \"@Username\"\r\n        },\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#passwordField\",\r\n            \"pluginName\": \"SendKeys\",\r\n            \"argument\": \"@Password\"\r\n        },\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#loginButton\",\r\n            \"pluginName\": \"Click\"\r\n        }\r\n    ],\r\n    \"scope\": [\r\n        \"Web\",\r\n        \"MobileWeb\"\r\n    ],\r\n    \"summary\": [\r\n        \"The `Login` plugin automates the process of logging into a web application by filling in username and password fields and clicking the login button.\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						},
						"description": "### Endpoint\n\n`PUT /api/v4/g4/templates`\n\n### Description\n\nThis endpoint adds a new template based on the provided `G4PluginAttribute` manifest. If the template already exists, it is overwritten, and the engine cache is updated. A `204 No Content` response indicates a successful addition or overwrite. If an unexpected error occurs during the operation, a `500 Internal Server Error` response is returned with an appropriate error message.\n\n### Parameters\n\n| **Parameter** | **Location** | **Type** | **Required** | **Description** |\n| --- | --- | --- | --- | --- |\n| `manifest` | Body | `G4PluginAttribute` | Yes | The manifest of the template to be added. Must be a valid `G4PluginAttribute` object with all required fields. |\n\n### Responses\n\n**204 No Content**  \n_Description_: The template was successfully added or overwritten, and the engine cache was updated.  \n_Content-Type_: `application/json`\n\n**500 Internal Server Error**  \n_Description_: An unexpected error occurred while adding the template.  \n_Content-Type_: `application/json`\n\n### Example Success Responses\n\n**Example for 204 No Content**\n\n_No body content._\n\n### Example Error Response\n\n**500 Internal Server Error**\n\n``` json\n{\n    \"status\": 500,\n    \"errors\": {\n        \"UnableToLoadDatabase\": [\n            \"An error occurred while adding the template.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"AddTemplate\",\n        \"controller\": \"Templates\",\n        \"name\": \"ExampleTemplate\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: PUT  \n**URL**: `https://api.yourdomain.com/api/v4/g4/templates`  \n**Headers**:\n\n- `Content-Type`: `application/json`\n    \n- `Accept`: `application/json`\n    \n\n**Body** (raw, JSON):\n\n``` json\n{\n    \"pluginType\": \"Action\",\n    \"key\": \"InvokeClick\",\n    \"description\": [\n        \"### Purpose\",\n        \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n    ],\n    \"author\": {\n        \"link\": \"https://www.linkedin.com/in/************/\",\n        \"name\": \"*********\"\n    },\n    \"categories\": [\n        \"Ui\",\n        \"Browser\"\n    ],\n    \"protocol\": {\n        \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n    },\n    \"examples\": [\n        {\n            \"description\": [\n                \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n            ],\n            \"rule\": {\n                \"locator\": \"CssSelector\",\n                \"onElement\": \"#ClickButton\",\n                \"pluginName\": \"InvokeClick\"\n            }\n        }\n    ]\n}\n\n ```\n\n### Example cURL\n\n``` bash\ncurl -X PUT \"https://api.yourdomain.com/api/v4/g4/templates\" \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Accept: application/json\" \\\n     -d '{\n           \"pluginType\": \"Action\",\n           \"key\": \"InvokeClick\",\n           \"description\": [\n               \"### Purpose\",\n               \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n           ],\n           \"author\": {\n               \"link\": \"https://www.linkedin.com/in/************/\",\n               \"name\": \"*********\"\n           },\n           \"categories\": [\n               \"Ui\",\n               \"Browser\"\n           ],\n           \"protocol\": {\n               \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n           },\n           \"examples\": [\n               {\n                   \"description\": [\n                       \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n                   ],\n                   \"rule\": {\n                       \"locator\": \"CssSelector\",\n                       \"onElement\": \"#ClickButton\",\n                       \"pluginName\": \"InvokeClick\"\n                   }\n               }\n           ]\n         }'\n\n ```\n\n### Notes\n\n- **Manifest (****`manifest`****)**:\n    \n    - **Description**: The manifest of the template to be added. It should adhere to the `G4PluginAttribute` structure and include all required fields.\n        \n    - **Behavior**:\n        \n        - **Add**: If the template does not exist, it will be added.\n            \n        - **Overwrite**: If the template exists, it will be overwritten, and the engine cache will be updated accordingly.\n            \n- **Response Behavior**:\n    \n    - **204 No Content**: Indicates that the template was successfully added or overwritten. The engine cache has been updated to reflect this change.\n        \n    - **500 Internal Server Error**: Indicates that an unexpected error occurred during the operation. The response includes error details for debugging purposes.\n        \n- **Error Handling**:\n    \n    - **500 Internal Server Error**:\n        \n        - **Description**: Occurs if an unexpected error happens while adding the template.\n            \n        - **Structure**:\n            \n            - `status`: HTTP status code (`500`).\n                \n            - `errors`: Detailed error messages.\n                \n            - `routeData`: Context about where the error occurred, including the action method, controller, and environment name.\n                \n            - `traceId`: A unique identifier for the request, useful for debugging and tracing purposes.\n                \n- **Content Types**:\n    \n    - **Request**: `application/json`\n        \n    - **Response**:\n        \n        - `204 No Content`: No content.\n            \n        - `500 Internal Server Error`: `application/json`\n            \n- **Idempotency**:\n    \n    - This operation is **idempotent**. Adding or overwriting the same template multiple times with the same manifest will have the same effect as making the request once. Subsequent PUT requests with identical data will consistently return `204 No Content` without altering the template.\n        \n- **Trace ID**:\n    \n    - The `traceId` in error responses is a unique identifier for each request, aiding in debugging and tracing through logs.\n        \n- **Route Data**:\n    \n    - Provides additional context about where the error occurred, including the action method, controller, and the specific environment name that caused the error."
					},
					"response": []
				},
				{
					"name": "New Template - AnotherTemplate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aliases\":[\r\n        \"Test1\"\r\n    ],\r\n    \"author\": {\r\n        \"link\": \"https://www.linkedin.com/in/roei-sabag-247aa18/\",\r\n        \"name\": \"Roei Sabag\"\r\n    },\r\n    \"categories\": [\r\n        \"UserInterface\",\r\n        \"Authentication\"\r\n    ],\r\n    \"source\": \"Template\",\r\n    \"description\": [\r\n        \"### Purpose\",\r\n        \"\",\r\n        \"The `Login` plugin is designed to automate the process of logging into a web application by interacting with the necessary username and password fields and clicking the login button.\",\r\n        \"\",\r\n        \"### Key Features and Functionality\",\r\n        \"\",\r\n        \"| Feature                 | Description                                                                                            |\",\r\n        \"|-------------------------|--------------------------------------------------------------------------------------------------------|\",\r\n        \"| Dynamic Field Detection | Automatically locates the username, password fields, and login button based on provided locators.      |\",\r\n        \"| Secure Input Handling   | Ensures secure handling of sensitive data like passwords during automation workflows.                  |\",\r\n        \"| Error Handling          | Incorporates error handling to manage exceptions, such as incorrect login details or missing elements. |\",\r\n        \"\",\r\n        \"### Usages in RPA\",\r\n        \"\",\r\n        \"| Usage                | Description                                                                                                     |\",\r\n        \"|----------------------|-----------------------------------------------------------------------------------------------------------------|\",\r\n        \"| Web Login Automation | Automates the login process by filling in the username and password fields and clicking the login button.       |\",\r\n        \"| Form Submission      | Automates the submission of login forms in web applications.                                                    |\",\r\n        \"| Error Handling       | Detects and handles scenarios where the login process fails, such as incorrect credentials or missing elements. |\"\r\n    ],\r\n    \"examples\": [\r\n        {\r\n            \"description\": [\r\n                \"Perform a login action by sending the username and password to the respective input fields and clicking the login button.\"\r\n            ],\r\n            \"rule\": {\r\n                \"$type\": \"Action\",\r\n                \"pluginName\": \"Login\",\r\n                \"argument\": \"{{$ --Username:Foo --Password:bar}}\"\r\n            }\r\n        }\r\n    ],\r\n    \"key\": \"TestTemplate\",\r\n    \"manifestVersion\": 4,\r\n    \"parameters\": [\r\n        {\r\n            \"description\": [\r\n                \"Specifies the username that should be entered into the username input field during the login process.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Username\",\r\n            \"type\": \"String\"\r\n        },\r\n        {\r\n            \"description\": [\r\n                \"Specifies the password that should be entered into the password input field during the login process.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Password\",\r\n            \"type\": \"String\"\r\n        }\r\n    ],\r\n    \"pluginType\": \"Action\",\r\n    \"properties\": [\r\n        {\r\n            \"description\": [\r\n                \"Specifies the credentials used for logging in. The argument accepts both the username and password in the format '@Username' and '@Password'.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Argument\",\r\n            \"type\": \"String|Expression\"\r\n        }\r\n    ],\r\n    \"rules\": [\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#usernameField\",\r\n            \"pluginName\": \"SendKeys\",\r\n            \"argument\": \"@Username\"\r\n        },\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#passwordField\",\r\n            \"pluginName\": \"SendKeys\",\r\n            \"argument\": \"@Password\"\r\n        },\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#loginButton\",\r\n            \"pluginName\": \"Click\"\r\n        }\r\n    ],\r\n    \"scope\": [\r\n        \"Web\",\r\n        \"MobileWeb\"\r\n    ],\r\n    \"summary\": [\r\n        \"The `Login` plugin automates the process of logging into a web application by filling in username and password fields and clicking the login button.\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						},
						"description": "### Endpoint\n\n`PUT /api/v4/g4/templates`\n\n### Description\n\nThis endpoint adds a new template based on the provided `G4PluginAttribute` manifest. If the template already exists, it is overwritten, and the engine cache is updated. A `204 No Content` response indicates a successful addition or overwrite. If an unexpected error occurs during the operation, a `500 Internal Server Error` response is returned with an appropriate error message.\n\n### Parameters\n\n| **Parameter** | **Location** | **Type** | **Required** | **Description** |\n| --- | --- | --- | --- | --- |\n| `manifest` | Body | `G4PluginAttribute` | Yes | The manifest of the template to be added. Must be a valid `G4PluginAttribute` object with all required fields. |\n\n### Responses\n\n**204 No Content**  \n_Description_: The template was successfully added or overwritten, and the engine cache was updated.  \n_Content-Type_: `application/json`\n\n**500 Internal Server Error**  \n_Description_: An unexpected error occurred while adding the template.  \n_Content-Type_: `application/json`\n\n### Example Success Responses\n\n**Example for 204 No Content**\n\n_No body content._\n\n### Example Error Response\n\n**500 Internal Server Error**\n\n``` json\n{\n    \"status\": 500,\n    \"errors\": {\n        \"UnableToLoadDatabase\": [\n            \"An error occurred while adding the template.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"AddTemplate\",\n        \"controller\": \"Templates\",\n        \"name\": \"ExampleTemplate\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: PUT  \n**URL**: `https://api.yourdomain.com/api/v4/g4/templates`  \n**Headers**:\n\n- `Content-Type`: `application/json`\n    \n- `Accept`: `application/json`\n    \n\n**Body** (raw, JSON):\n\n``` json\n{\n    \"pluginType\": \"Action\",\n    \"key\": \"InvokeClick\",\n    \"description\": [\n        \"### Purpose\",\n        \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n    ],\n    \"author\": {\n        \"link\": \"https://www.linkedin.com/in/************/\",\n        \"name\": \"*********\"\n    },\n    \"categories\": [\n        \"Ui\",\n        \"Browser\"\n    ],\n    \"protocol\": {\n        \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n    },\n    \"examples\": [\n        {\n            \"description\": [\n                \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n            ],\n            \"rule\": {\n                \"locator\": \"CssSelector\",\n                \"onElement\": \"#ClickButton\",\n                \"pluginName\": \"InvokeClick\"\n            }\n        }\n    ]\n}\n\n ```\n\n### Example cURL\n\n``` bash\ncurl -X PUT \"https://api.yourdomain.com/api/v4/g4/templates\" \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Accept: application/json\" \\\n     -d '{\n           \"pluginType\": \"Action\",\n           \"key\": \"InvokeClick\",\n           \"description\": [\n               \"### Purpose\",\n               \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n           ],\n           \"author\": {\n               \"link\": \"https://www.linkedin.com/in/************/\",\n               \"name\": \"*********\"\n           },\n           \"categories\": [\n               \"Ui\",\n               \"Browser\"\n           ],\n           \"protocol\": {\n               \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n           },\n           \"examples\": [\n               {\n                   \"description\": [\n                       \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n                   ],\n                   \"rule\": {\n                       \"locator\": \"CssSelector\",\n                       \"onElement\": \"#ClickButton\",\n                       \"pluginName\": \"InvokeClick\"\n                   }\n               }\n           ]\n         }'\n\n ```\n\n### Notes\n\n- **Manifest (****`manifest`****)**:\n    \n    - **Description**: The manifest of the template to be added. It should adhere to the `G4PluginAttribute` structure and include all required fields.\n        \n    - **Behavior**:\n        \n        - **Add**: If the template does not exist, it will be added.\n            \n        - **Overwrite**: If the template exists, it will be overwritten, and the engine cache will be updated accordingly.\n            \n- **Response Behavior**:\n    \n    - **204 No Content**: Indicates that the template was successfully added or overwritten. The engine cache has been updated to reflect this change.\n        \n    - **500 Internal Server Error**: Indicates that an unexpected error occurred during the operation. The response includes error details for debugging purposes.\n        \n- **Error Handling**:\n    \n    - **500 Internal Server Error**:\n        \n        - **Description**: Occurs if an unexpected error happens while adding the template.\n            \n        - **Structure**:\n            \n            - `status`: HTTP status code (`500`).\n                \n            - `errors`: Detailed error messages.\n                \n            - `routeData`: Context about where the error occurred, including the action method, controller, and environment name.\n                \n            - `traceId`: A unique identifier for the request, useful for debugging and tracing purposes.\n                \n- **Content Types**:\n    \n    - **Request**: `application/json`\n        \n    - **Response**:\n        \n        - `204 No Content`: No content.\n            \n        - `500 Internal Server Error`: `application/json`\n            \n- **Idempotency**:\n    \n    - This operation is **idempotent**. Adding or overwriting the same template multiple times with the same manifest will have the same effect as making the request once. Subsequent PUT requests with identical data will consistently return `204 No Content` without altering the template.\n        \n- **Trace ID**:\n    \n    - The `traceId` in error responses is a unique identifier for each request, aiding in debugging and tracing through logs.\n        \n- **Route Data**:\n    \n    - Provides additional context about where the error occurred, including the action method, controller, and the specific environment name that caused the error."
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Automation",
			"item": [
				{
					"name": "Invoke Automation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authentication\": {\r\n        \"username\": \"{{ApiUser}}\"\r\n    },\r\n    \"driverParameters\": {\r\n        \"driver\": \"MicrosoftEdgeDriver\",\r\n        \"driverBinaries\": \"{{DriverBinaries}}\",\r\n        \"capabilities\": {\r\n            \"alwaysMatch\": {\r\n                \"browserName\": \"MicrosoftEdge\"\r\n            },\r\n            \"firstMatch\": [\r\n                {}\r\n            ]\r\n        }\r\n    },\r\n    \"stages\": [\r\n        {\r\n            \"description\": \"Main stage for invoking integration tests.\",\r\n            \"jobs\": [\r\n                {\r\n                    \"reference\": {\r\n                        \"description\": \"Job responsible for invoking integration a single integration test.\",\r\n                        \"name\": \"Invoking Test G4.IntegrationTests.Plugins.Common.WriteLog.C0001\"\r\n                    },\r\n                    \"rules\": [\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"argument\": \"about:blank\",\r\n                            \"pluginName\": \"GoToUrl\",\r\n                            \"regularExpression\": \"(?s).*\"\r\n                        },\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"argument\": \"The first 8 alphanumeric characters of the GUID are {{$New-Guid --Pattern:^\\\\w{8}}}\",\r\n                            \"pluginName\": \"WriteLog\"\r\n                        },\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"pluginName\": \"CloseBrowser\"\r\n                        }\r\n                    ],\r\n                    \"stopOnError\": false\r\n                }\r\n            ],\r\n            \"name\": \"Integration Tests\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/automation/invoke",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"automation",
								"invoke"
							]
						},
						"description": "### Endpoint\n\n`POST /api/v4/g4/integration/invoke`\n\n### Description\n\nThis endpoint triggers the invocation of an automation session based on the provided automation model. The result includes detailed information about the automation run, such as plugin execution details, driver sessions, and performance metrics. The automation session is executed with the parameters specified in the request body. Each stage must contain at least one job.\n\n### Request Body\n\nThe request body must contain an automation model (`G4AutomationModel`), which specifies the details of the automation session to be invoked, including authentication, driver parameters, stages, jobs, and rules. Each stage must include at least one job.\n\n#### Fields:\n\n| Field | Type | Required | Description |\n| --- | --- | --- | --- |\n| authentication | object | Yes | Specifies the username for API authentication. |\n| driverParameters | object | Yes | Details related to the browser driver and capabilities used for automation. |\n| stages | array | Yes | List of stages containing at least one job each. |\n| jobs | array | Yes | List of jobs to be executed in each stage (at least one job per stage). |\n\n#### Example Request Body\n\n``` json\n{\n    \"authentication\": {\n        \"username\": \"{{ApiUser}}\"\n    },\n    \"driverParameters\": {\n        \"driver\": \"MicrosoftEdgeDriver\",\n        \"driverBinaries\": \"{{DriverBinariesPath}}\",\n        \"capabilities\": {\n            \"alwaysMatch\": {\n                \"browserName\": \"MicrosoftEdge\"\n            },\n            \"firstMatch\": [\n                {}\n            ]\n        }\n    },\n    \"stages\": [\n        {\n            \"description\": \"Main stage for invoking integration tests.\",\n            \"jobs\": [\n                {\n                    \"reference\": {\n                        \"description\": \"Job responsible for invoking a single integration test.\",\n                        \"name\": \"Invoking Test G4.IntegrationTests.Plugins.Common.WriteLog.C0001\"\n                    },\n                    \"rules\": [\n                        {\n                            \"$type\": \"Action\",\n                            \"argument\": \"{{TestPageUrl}}\",\n                            \"pluginName\": \"GoToUrl\",\n                            \"regularExpression\": \"(?s).*\"\n                        },\n                        {\n                            \"$type\": \"Action\",\n                            \"argument\": \"The first 8 alphanumeric characters of the GUID are {{$New-Guid --Pattern:^\\\\w{8}}}\",\n                            \"pluginName\": \"WriteLog\"\n                        },\n                        {\n                            \"$type\": \"Action\",\n                            \"pluginName\": \"CloseBrowser\"\n                        }\n                    ],\n                    \"stopOnError\": false\n                }\n            ],\n            \"name\": \"Integration Tests\"\n        }\n    ]\n}\n\n ```\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully invoked the automation session.  \n_Content-Type_: `application/json`\n\n**Example Success Response**\n\n``` json\n{\n    \"sessionId\": \"b3f3b290-5e03-471e-908e-a2c7bd02f01d\",\n    \"performancePoint\": {\n        \"$type\": \"Automation\",\n        \"authenticationTime\": 18781,\n        \"driverSetupTime\": 0,\n        \"sessionTime\": 2317560,\n        \"start\": \"2024-10-11T09:02:36.285907Z\",\n        \"end\": \"2024-10-11T09:02:38.616122Z\",\n        \"setupDelegationTime\": 756,\n        \"setupTime\": 1404,\n        \"teardownDelegationTime\": 25107,\n        \"teardownTime\": 294995,\n        \"runTime\": 23302147,\n        \"timeouts\": 0\n    },\n    \"sessions\": {\n        \"f9b7a0958ea9fdb988b737f70f8867c5\": {\n            \"performancePoints\": [\n                {\n                    \"$type\": \"Plugin\",\n                    \"reference\": {\n                        \"alias\": \"GoToUrl\",\n                        \"description\": \"Automates the navigation to specified URLs within the browser.\",\n                        \"name\": \"OpenUrl\"\n                    },\n                    \"driverSession\": \"f9b7a0958ea9fdb988b737f70f8867c5\",\n                    \"start\": \"2024-10-11T09:02:38.293867Z\",\n                    \"end\": \"2024-10-11T09:02:38.453346Z\",\n                    \"runTime\": 1409205,\n                    \"setupTime\": 179879,\n                    \"teardownTime\": 3605\n                }\n            ]\n        }\n    }\n}\n\n ```\n\n**404 Not Found**  \n_Description_: The specified automation model was not found.  \n_Content-Type_: `application/problem+json`\n\n**Example Error Response**\n\n``` json\n{\n    \"status\": 404,\n    \"traceId\": \"0HN729FN8M3ET:00000001\",\n    \"errors\": {\n        \"modelName\": [\n            \"Automation model 'SampleAutomationModel' not found.\"\n        ]\n    }\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: POST  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/invoke`  \n**Headers**:\n\n- Content-Type: `application/json`\n    \n\n**Body**:\n\n``` json\n{\n    \"authentication\": {\n        \"username\": \"{{ApiUser}}\"\n    },\n    \"driverParameters\": {\n        \"driver\": \"MicrosoftEdgeDriver\",\n        \"driverBinaries\": \"{{DriverBinariesPath}}\",\n        \"capabilities\": {\n            \"alwaysMatch\": {\n                \"browserName\": \"MicrosoftEdge\"\n            },\n            \"firstMatch\": [\n                {}\n            ]\n        }\n    },\n    \"stages\": [\n        {\n            \"description\": \"Main stage for invoking integration tests.\",\n            \"jobs\": [\n                {\n                    \"reference\": {\n                        \"description\": \"Job responsible for invoking a single integration test.\",\n                        \"name\": \"Invoking Test G4.IntegrationTests.Plugins.Common.WriteLog.C0001\"\n                    },\n                    \"rules\": [\n                        {\n                            \"$type\": \"Action\",\n                            \"argument\": \"{{TestPageUrl}}\",\n                            \"pluginName\": \"GoToUrl\"\n                        },\n                        {\n                            \"$type\": \"Action\",\n                            \"argument\": \"The first 8 alphanumeric characters of the GUID are {{$New-Guid --Pattern:^\\\\w{8}}}\",\n                            \"pluginName\": \"WriteLog\"\n                        },\n                        {\n                            \"$type\": \"Action\",\n                            \"pluginName\": \"CloseBrowser\"\n                        }\n                    ],\n                    \"stopOnError\": false\n                }\n            ],\n            \"name\": \"Integration Tests\"\n        }\n    ]\n}\n\n ```\n\n### Notes\n\n- **Jobs**: Each stage must contain at least one job to execute.\n    \n- **Authentication**: The `authentication` field is required to authenticate the automation session.\n    \n- **Driver Parameters**: These details specify the browser driver and configuration for the automation session."
					},
					"response": []
				},
				{
					"name": "Initialize Automation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authentication\": {\r\n        \"username\": \"{{ApiUser}}\"\r\n    },\r\n    \"driverParameters\": {\r\n        \"driver\": \"MicrosoftEdgeDriver\",\r\n        \"driverBinaries\": \"{{DriverBinaries}}\",\r\n        \"capabilities\": {\r\n            \"alwaysMatch\": {\r\n                \"browserName\": \"MicrosoftEdge\"\r\n            },\r\n            \"firstMatch\": [\r\n                {}\r\n            ]\r\n        }\r\n    },\r\n    \"stages\": [\r\n        {\r\n            \"description\": \"Main stage for invoking integration tests.\",\r\n            \"jobs\": [\r\n                {\r\n                    \"reference\": {\r\n                        \"description\": \"Job responsible for invoking integration a single integration test.\",\r\n                        \"name\": \"Invoking Test G4.IntegrationTests.Plugins.Common.WriteLog.C0001\"\r\n                    },\r\n                    \"rules\": [\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"argument\": \"about:blank\",\r\n                            \"pluginName\": \"GoToUrl\",\r\n                            \"regularExpression\": \"(?s).*\"\r\n                        },\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"argument\": \"The first 8 alphanumeric characters of the GUID are {{$New-Guid --Pattern:^\\\\w{8}}}\",\r\n                            \"pluginName\": \"WriteLog\"\r\n                        },\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"pluginName\": \"CloseBrowser\"\r\n                        }\r\n                    ],\r\n                    \"stopOnError\": false\r\n                }\r\n            ],\r\n            \"name\": \"Integration Tests\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/automation/init",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"automation",
								"init"
							]
						},
						"description": "**Endpoint**\n\n`POST /api/v4/g4/automation/init`\n\n**Description**\n\nThis endpoint initializes an automation request by setting up all necessary references and action connections in the provided `G4AutomationModel`. The result is an initialized model that is ready for invocation.\n\n**Request Body**\n\nThe request body must contain a `G4AutomationModel`, which specifies the configuration and parameters for initializing the automation session. This includes authentication details, driver settings, and stage definitions, each containing one or more jobs to be executed.\n\n**Fields:**\n\n| Field | Type | Required | Description |\n| --- | --- | --- | --- |\n| authentication | object | Yes | Specifies authentication details, including username for API access. |\n| driverParameters | object | Yes | Configurations related to the browser driver and capabilities for the automation session. |\n| stages | array | Yes | List of stages, each containing at least one job. |\n| jobs | array | Yes | Jobs to be executed within each stage, with rules and configurations for automation. |\n\n**Example Request Body**\n\n``` json\n{\n    \"authentication\": {\n        \"username\": \"{{ApiUser}}\"\n    },\n    \"driverParameters\": {\n        \"driver\": \"MicrosoftEdgeDriver\",\n        \"driverBinaries\": \"{{DriverBinariesPath}}\",\n        \"capabilities\": {\n            \"alwaysMatch\": {\n                \"browserName\": \"MicrosoftEdge\"\n            },\n            \"firstMatch\": [\n                {}\n            ]\n        }\n    },\n    \"stages\": [\n        {\n            \"description\": \"Setup stage for initializing automation.\",\n            \"jobs\": [\n                {\n                    \"reference\": {\n                        \"description\": \"Setup job to initialize automation environment.\",\n                        \"name\": \"SetupEnvironment\"\n                    },\n                    \"rules\": [\n                        {\n                            \"$type\": \"Action\",\n                            \"argument\": \"{{SetupPageUrl}}\",\n                            \"pluginName\": \"OpenUrl\",\n                            \"regularExpression\": \"(?s).*\"\n                        },\n                        {\n                            \"$type\": \"Action\",\n                            \"argument\": \"Initialization of resources\",\n                            \"pluginName\": \"InitializeResources\"\n                        }\n                    ],\n                    \"stopOnError\": true\n                }\n            ],\n            \"name\": \"Initialization\"\n        }\n    ]\n}\n\n ```\n\n**Responses**\n\n**200 OK**\n\n- **Description**: Successfully initialized the automation request.\n    \n- **Content-Type**: `application/json`\n    \n\n**Example Success Response**\n\n``` json\n{\n    \"authentication\": {\n        \"username\": \"*****\"\n    },\n    \"driverParameters\": {\n        \"driver\": \"MicrosoftEdgeDriver\",\n        \"driverBinaries\": \"*****\",\n        \"capabilities\": {\n            \"alwaysMatch\": {\n                \"browserName\": \"MicrosoftEdge\"\n            },\n            \"firstMatch\": [\n                {}\n            ]\n        }\n    },\n    \"iteration\": 0,\n    \"reference\": {\n        \"description\": \"Default Automation Pipeline in the G4™ automation engine.\",\n        \"name\": \"2024-11-08T08:37:12.615951Z: Untitled Automation\",\n        \"id\": \"610b58e6-2638-4cf0-a81f-d855ab15425e\",\n        \"iteration\": 0\n    },\n    \"settings\": {\n        \"automationSettings\": {\n            \"loadTimeout\": 60000,\n            \"maxParallel\": 1,\n            \"returnFlatResponse\": true,\n            \"returnStructuredResponse\": true,\n            \"searchTimeout\": 15000\n        },\n        \"environmentsSettings\": {\n            \"defaultEnvironment\": \"SystemParameters\",\n            \"returnEnvironment\": false\n        },\n        \"exceptionsSettings\": {\n            \"returnExceptions\": true\n        },\n        \"queueManagerSettings\": {},\n        \"performancePointsSettings\": {\n            \"returnPerformancePoints\": true\n        },\n        \"pluginsSettings\": {\n            \"forceRuleReference\": true\n        },\n        \"screenshotsSettings\": {\n            \"convertToBase64\": false,\n            \"onExceptionOnly\": false,\n            \"outputFolder\": \"*****\",\n            \"returnScreenshots\": false\n        }\n    },\n    \"stages\": [\n        {\n            \"description\": \"Main stage for invoking integration tests.\",\n            \"failOnException\": false,\n            \"jobs\": [\n                {\n                    \"reference\": {\n                        \"description\": \"Job responsible for invoking a single integration test.\",\n                        \"name\": \"Invoking Test G4.IntegrationTests.Plugins.Common.WriteLog.C0001\",\n                        \"id\": \"8d1037c1-e6a4-4b2c-9339-0a21a1cd0f0b\",\n                        \"stageReference\": {\n                            \"automationReference\": {\n                                \"description\": \"Default Automation Pipeline in the G4™ automation engine.\",\n                                \"name\": \"2024-11-08T08:37:12.615951Z: Untitled Automation\",\n                                \"id\": \"610b58e6-2638-4cf0-a81f-d855ab15425e\",\n                                \"iteration\": 0\n                            },\n                            \"description\": \"Default Stage within an automation pipeline in the G4™ automation engine.\",\n                            \"id\": \"ec935ee0-53ed-4eab-a604-0d6d2a45a514\",\n                            \"name\": \"2024-11-08T08:37:12.616809Z: Untitled Stage\"\n                        }\n                    },\n                    \"rules\": [\n                        {\n                            \"$type\": \"Action\",\n                            \"argument\": \"about:blank\",\n                            \"pluginName\": \"GoToUrl\",\n                            \"reference\": {\n                                \"alias\": \"GoToUrl\",\n                                \"description\": \"Automates the navigation to specified URLs within the browser, enabling seamless integration into multi-page workflows and testing scenarios.\",\n                                \"name\": \"OpenUrl\",\n                                \"type\": \"Action\"\n                            }\n                        },\n                        {\n                            \"$type\": \"Action\",\n                            \"argument\": \"The first 8 alphanumeric characters of the GUID are {{$New-Guid --Pattern:^\\\\w{8}}}\",\n                            \"pluginName\": \"WriteLog\",\n                            \"reference\": {\n                                \"alias\": \"WriteLog\",\n                                \"description\": \"Logs information during the execution of automation scripts, providing insights into the automation process.\",\n                                \"name\": \"WriteLog\",\n                                \"type\": \"Action\"\n                            }\n                        },\n                        {\n                            \"$type\": \"Action\",\n                            \"argument\": \"\",\n                            \"pluginName\": \"CloseBrowser\",\n                            \"reference\": {\n                                \"alias\": \"CloseBrowser\",\n                                \"description\": \"Closes the active browser window and disposes of the WebDriver instance.\",\n                                \"name\": \"CloseBrowser\",\n                                \"type\": \"Action\"\n                            }\n                        }\n                    ],\n                    \"stopOnError\": false\n                }\n            ],\n            \"name\": \"Integration Tests\"\n        }\n    ]\n}\n\n ```\n\n**404 Not Found**\n\n- **Description**: The specified automation model could not be initialized.\n    \n- **Content-Type**: `application/problem+json`\n    \n\n**Example Error Response**\n\n``` json\n{\n    \"status\": 404,\n    \"traceId\": \"0HN729FN8M3ET:00000001\",\n    \"errors\": {\n        \"modelName\": [\n            \"Automation model 'SampleAutomationModel' not found.\"\n        ]\n    }\n}\n\n ```\n\n**Example Request (using Postman)**\n\n- **Method**: POST\n    \n- **URL**: `https://api.yourdomain.com/api/v4/g4/automation/init`\n    \n- **Headers**:\n    - Content-Type: `application/json`\n        \n\n**Body:**\n\n``` json\n{\n    \"authentication\": {\n        \"username\": \"{{ApiUser}}\"\n    },\n    \"driverParameters\": {\n        \"driver\": \"MicrosoftEdgeDriver\",\n        \"driverBinaries\": \"{{DriverBinariesPath}}\",\n        \"capabilities\": {\n            \"alwaysMatch\": {\n                \"browserName\": \"MicrosoftEdge\"\n            },\n            \"firstMatch\": [\n                {}\n            ]\n        }\n    },\n    \"stages\": [\n        {\n            \"description\": \"Setup stage for initializing automation.\",\n            \"jobs\": [\n                {\n                    \"reference\": {\n                        \"description\": \"Setup job to initialize automation environment.\",\n                        \"name\": \"SetupEnvironment\"\n                    },\n                    \"rules\": [\n                        {\n                            \"$type\": \"Action\",\n                            \"argument\": \"{{SetupPageUrl}}\",\n                            \"pluginName\": \"OpenUrl\",\n                            \"regularExpression\": \"(?s).*\"\n                        },\n                        {\n                            \"$type\": \"Action\",\n                            \"argument\": \"Initialization of resources\",\n                            \"pluginName\": \"InitializeResources\"\n                        }\n                    ],\n                    \"stopOnError\": true\n                }\n            ],\n            \"name\": \"Initialization\"\n        }\n    ]\n}\n\n ```\n\n**Notes**\n\n- **Jobs**: Each stage must contain at least one job to execute.\n    \n- **Authentication**: The `authentication` field is required for authorized access to the automation setup.\n    \n- **Driver Parameters**: Provides details about the browser driver and configuration necessary for initializing the automation session.\n    \n- **Sensitive Information**: In the response examples, sensitive information such as usernames and file paths have been masked for security purposes."
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Environment",
			"item": [
				{
					"name": "Set Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Parameter1\": \"Foo Bar After Update\",\r\n    \"Parameter2\": \"1\",\r\n    \"Parameter3\": \"false\",\r\n    \"Parameter4\": \"0.5%\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/TempEnvironment",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"TempEnvironment"
							]
						},
						"description": "### Endpoint\n\n`PUT /api/v4/g4/environments/{name}`\n\n### Description\n\nThis endpoint **updates** the parameters of an existing environment identified by its name. If the specified environment does not exist, it **creates** a new environment with the provided parameters. The `encode` query parameter allows clients to specify whether the parameters should be Base64-encoded before being stored.\n\n- **204 No Content**: Indicates that an existing environment was successfully updated.\n- **201 Created**: Indicates that a new environment was successfully created.\n- **400 Bad Request**: Indicates that the request is invalid, such as providing an improperly formatted environment name.\n\n### Parameters\n\n| **Parameter** | **Location** | **Type**                    | **Required** | **Description**                                                                                                                                                   |\n|---------------|--------------|-----------------------------|--------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `name`        | Path         | `string`                    | Yes          | The name of the environment to be updated or created. Must match the regular expression `\\w+` (alphanumeric characters and underscores only).                       |\n| `parameters`  | Body         | `Dictionary<string, string>` | No           | A dictionary of parameters to associate with the environment. If the environment exists, these parameters will update the existing ones. If not, a new environment will be created with these parameters. |\n| `encode`      | Query        | `bool`                      | No           | Specifies whether the parameters should be Base64-encoded before being stored. Defaults to `true`.                                                                |\n\n### Responses\n\n**201 Created**  \n_Description_: The environment did not exist and was successfully created with the provided parameters.  \n_Content-Type_: `application/json`\n\n**204 No Content**  \n_Description_: The environment existed and was successfully updated with the provided parameters.  \n_Content-Type_: `application/json`\n\n**400 Bad Request**  \n_Description_: Invalid request. The environment name is not in the correct format.  \n_Content-Type_: `application/json`\n\n### Example Success Responses\n\n**Example for 201 Created**\n\n```json\n{\n    \"database_host\": \"prod-db.yourdomain.com\",\n    \"database_port\": \"5432\",\n    \"api_base_url\": \"https://api.yourdomain.com/v1\",\n    \"api_timeout\": \"45\"\n}\n```\n\n**Example for 204 No Content**\n\n_No body content._\n\n### Example Error Responses\n\n**400 Bad Request**\n\n```json\n{\n    \"status\": 400,\n    \"errors\": {\n        \"name\": [\n            \"The environment name must match the regular expression '\\\\w+'.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"SetEnvironment\",\n        \"controller\": \"Environments\",\n        \"name\": \"InvalidEnv#\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n```\n\n### Example Request (using Postman)\n\n**Method**: PUT  \n**URL**: `https://api.yourdomain.com/api/v4/g4/environments/Production?encode=true`  \n**Headers**:\n\n- `Content-Type`: `application/json`\n- `Accept`: `application/json`\n\n**Body** (raw, JSON):\n\n```json\n{\n    \"database_host\": \"prod-db.yourdomain.com\",\n    \"database_port\": \"5432\",\n    \"api_base_url\": \"https://api.yourdomain.com/v1\",\n    \"api_timeout\": \"45\"\n}\n```\n\n### Example cURL\n\n```bash\ncurl -X PUT \"https://api.yourdomain.com/api/v4/g4/environments/Production?encode=true\" \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Accept: application/json\" \\\n     -d '{\n           \"database_host\": \"prod-db.yourdomain.com\",\n           \"database_port\": \"5432\",\n           \"api_base_url\": \"https://api.yourdomain.com/v1\",\n           \"api_timeout\": \"45\"\n         }'\n```\n\n### Notes\n\n- **Environment Name (`{name}`)**:\n  - **Description**: The unique name of the environment to be updated or created.\n  - **Format**: Must match the regular expression `\\w+`, meaning it can only contain alphanumeric characters and underscores.\n\n- **Parameters (`parameters`)**:\n  - **Description**: A dictionary of key-value pairs to associate with the environment.\n  - **Behavior**:\n    - **Update**: If the environment exists, the provided parameters will update the existing ones.\n    - **Create**: If the environment does not exist, a new environment will be created with the provided parameters.\n\n- **Encode (`encode`)**:\n  - **Description**: Determines whether the provided parameters should be Base64-encoded before being stored.\n  - **Default**: `true`\n  - **Usage**: Set to `false` if parameters should be stored as plain text.\n\n- **Response Behavior**:\n  - **201 Created**: Indicates that a new environment was successfully created with the provided parameters. The response includes the environment details in JSON format.\n  - **204 No Content**: Indicates that an existing environment was successfully updated with the provided parameters. No content is returned in the response body.\n  - **400 Bad Request**: Indicates that the request is invalid, such as providing an improperly formatted environment name.\n\n- **Error Handling**:\n  - **400 Bad Request**:\n    - **Description**: Occurs when the `name` parameter does not conform to the required format.\n    - **Structure**:\n      - `status`: HTTP status code (`400`).\n      - `errors`: Detailed validation error messages specifying the issues.\n      - `routeData`: Information about where the error occurred, including the action method and controller.\n      - `traceId`: A unique identifier for the request, useful for debugging and tracing purposes.\n\n- **Content Types**:\n  - **Request**: `application/json`\n  - **Response**:\n    - `201 Created`: `application/json`\n    - `204 No Content`: No content\n    - `400 Bad Request`: `application/json`\n\n- **Idempotency**:\n  - This operation is **idempotent**. Creating or updating the same environment with the same parameters multiple times will have the same effect as making the request once. Subsequent identical PUT requests will consistently return `204 No Content` or `201 Created` without causing additional side effects.\n\n- **Trace ID**:\n  - The `traceId` included in error responses serves as a unique identifier for each request, facilitating easier debugging and log tracing.\n\n- **Route Data**:\n  - Provides contextual information about where the error occurred, including the action method and controller. This is useful for pinpointing issues during troubleshooting."
					},
					"response": []
				},
				{
					"name": "Set Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 or 200\", ()=> {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "ParameterValue",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/parameter/DocumentationParameter1",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"parameter",
								"DocumentationParameter1"
							]
						},
						"description": "### Endpoint\n\n`PUT /parameter/{name}?encode={encode}`\n\n---\n\n### Description\n\nThis endpoint creates a new parameter or updates an existing one under the default environment `SystemParameters`. You can optionally encode the value in Base64 before storing it by setting the `encode` query parameter.\n\n---\n\n### Parameters\n\n| **Parameter** | **Location** | **Type** | **Required** | **Description** |\n| --- | --- | --- | --- | --- |\n| `name` | Path | `string` | Yes | The name of the parameter to be created or updated. Must match the regular expression `\\w+` (alphanumeric characters and underscores only). |\n| `encode` | Query | `boolean` | No | Specifies whether the value should be encoded to Base64 before being stored. Defaults to `true` if not provided. |\n| `value` | Body | `string` | No | The value of the parameter as plain text. If not provided, the parameter will be set with an empty value. |\n\n---\n\n### Responses\n\n**200 OK**  \n_Description_: Parameter successfully updated in `SystemParameters`. Returns the updated parameter details.  \n_Content-Type_: `application/json`\n\n**201 Created**  \n_Description_: Parameter successfully created in `SystemParameters`. Returns the newly created parameter details.  \n_Content-Type_: `application/json`  \n_Headers_:\n\n- `Location`: `/parameter/{name}`\n    \n\n**400 Bad Request**  \n_Description_: Invalid request due to input validation errors. The response includes details about the validation failures.  \n_Content-Type_: `application/json`\n\n---\n\n### Example Success Responses\n\n**Example for 200 OK**\n\n``` json\n{\n  \"message\": \"Parameter 'database_host' updated successfully in 'SystemParameters'.\",\n  \"parameter\": {\n    \"database_host\": \"new.db.example.com\"\n  }\n}\n\n ```\n\n**Example for 201 Created**\n\n``` json\n{\n  \"message\": \"Parameter 'api_key' created successfully in 'SystemParameters'.\",\n  \"parameter\": {\n    \"api_key\": \"12345-abcde-67890-fghij\"\n  }\n}\n\n ```\n\n---\n\n### Example Error Response\n\n**400 Bad Request**\n\n``` json\n{\n    \"status\": 400,\n    \"errors\": {\n        \"name\": [\n            \"The field Name must match the regular expression '\\\\w+'.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"SetParameter\",\n        \"controller\": \"Environments\",\n        \"name\": \"ParameterName()\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n\n ```\n\n---\n\n### Example Request (using Postman)\n\n**Method**: PUT  \n**URL**: `https://api.yourdomain.com/parameter/database_host?encode=true`  \n**Headers**:\n\n- `Content-Type`: `text/plain`\n    \n- `Accept`: `application/json`\n    \n\n**Body** (raw, Text):\n\n```\nnew.db.example.com\n\n ```\n\n---\n\n### Example cURL\n\n``` bash\ncurl -X PUT \"https://api.yourdomain.com/parameter/database_host?encode=true\" \\\n     -H \"Content-Type: text/plain\" \\\n     -H \"Accept: application/json\" \\\n     -d \"new.db.example.com\"\n\n ```\n\n---\n\n### Notes\n\n- **Parameter Name (****`{name}`****)**: The name of the parameter to be created or updated. It must match the regular expression `\\w+`, meaning it can only contain alphanumeric characters and underscores.\n    \n- **Query Parameter** **`encode`**: (Optional) Specifies whether the value should be encoded to Base64 before being stored. Defaults to `true` if not provided.\n    \n- **Request Body**: The value of the parameter as plain text. If not provided, the parameter will be set with an empty value.\n    \n- **Response Behavior**:\n    \n    - If the parameter **already exists**, the endpoint updates it and returns a `200 OK` status with the updated parameter details.\n        \n    - If the parameter **does not exist**, the endpoint creates it and returns a `201 Created` status with the new parameter details. A `Location` header pointing to the new resource is included in the response.\n        \n- **Error Handling**:\n    \n    - A `400 Bad Request` status is returned if the parameter name is invalid or if there are validation errors.\n        \n    - The error response includes detailed information about the validation errors, as shown in the example.\n        \n- **Content Types**:\n    \n    - **Request**: `text/plain`\n        \n    - **Response**: `application/json`\n        \n- **Idempotency**: This operation is idempotent. Making the same request multiple times will have the same effect as making it once.\n    \n- **Trace ID**: The `traceId` in the error response is a unique identifier for the request, useful for debugging and tracing in logs.\n    \n- **Route Data**: Provides context about where the error occurred, including the action method, controller, and the problematic parameter value.\n    \n\n---\n\n### Summary\n\n- **Purpose**: Use this endpoint to create or update parameters in the `SystemParameters` environment.\n    \n- **Input Requirements**:\n    \n    - The parameter `name` must match the regular expression `\\w+` (alphanumeric characters and underscores only).\n        \n    - The `encode` query parameter is optional and defaults to `true`.\n        \n    - The request body should contain the parameter value as plain text.\n        \n- **Successful Responses**:\n    \n    - `200 OK` when a parameter is updated.\n        \n    - `201 Created` when a parameter is created (includes a `Location` header).\n        \n- **Error Responses**:\n    \n    - `400 Bad Request` with detailed validation errors if input validation fails.\n        \n- **Content Types**:\n    \n    - **Request**: `text/plain`\n        \n    - **Response**: `application/json`\n        \n- **Idempotency**: The operation is idempotent; repeated identical requests have the same effect.\n    \n\n---\n\n### Quick Reference\n\n- **HTTP Method**: PUT\n    \n- **URL Pattern**: `/parameter/{name}?encode={encode}`\n    \n- **Required Path Parameters**:\n    \n    - `name`: The name of the parameter (must match `\\w+`).\n        \n- **Optional Query Parameters**:\n    \n    - `encode`: `true` or `false` (defaults to `true`).\n        \n- **Headers**:\n    \n    - `Content-Type`: `text/plain`\n        \n    - `Accept`: `application/json`\n        \n- **Request Body**:\n    \n    - The parameter value as plain text."
					},
					"response": []
				},
				{
					"name": "Set Parameter with Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 or 200\", ()=> {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "ParameterValue",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/DocumentationEnvironment/parameter/DocumentationParameter1",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"DocumentationEnvironment",
								"parameter",
								"DocumentationParameter1"
							]
						},
						"description": "### Endpoint\n\n`PUT /parameter/{name}?encode={encode}`\n\n---\n\n### Description\n\nThis endpoint creates a new parameter or updates an existing one under the default environment `SystemParameters`. You can optionally encode the value in Base64 before storing it by setting the `encode` query parameter.\n\n---\n\n### Parameters\n\n| **Parameter** | **Location** | **Type** | **Required** | **Description** |\n| --- | --- | --- | --- | --- |\n| `name` | Path | `string` | Yes | The name of the parameter to be created or updated. Must match the regular expression `\\w+` (alphanumeric characters and underscores only). |\n| `encode` | Query | `boolean` | No | Specifies whether the value should be encoded to Base64 before being stored. Defaults to `true` if not provided. |\n| `value` | Body | `string` | No | The value of the parameter as plain text. If not provided, the parameter will be set with an empty value. |\n\n---\n\n### Responses\n\n**200 OK**  \n_Description_: Parameter successfully updated in `SystemParameters`. Returns the updated parameter details.  \n_Content-Type_: `application/json`\n\n**201 Created**  \n_Description_: Parameter successfully created in `SystemParameters`. Returns the newly created parameter details.  \n_Content-Type_: `application/json`  \n_Headers_:\n\n- `Location`: `/parameter/{name}`\n    \n\n**400 Bad Request**  \n_Description_: Invalid request due to input validation errors. The response includes details about the validation failures.  \n_Content-Type_: `application/json`\n\n---\n\n### Example Success Responses\n\n**Example for 200 OK**\n\n``` json\n{\n  \"message\": \"Parameter 'database_host' updated successfully in 'SystemParameters'.\",\n  \"parameter\": {\n    \"database_host\": \"new.db.example.com\"\n  }\n}\n\n ```\n\n**Example for 201 Created**\n\n``` json\n{\n  \"message\": \"Parameter 'api_key' created successfully in 'SystemParameters'.\",\n  \"parameter\": {\n    \"api_key\": \"12345-abcde-67890-fghij\"\n  }\n}\n\n ```\n\n---\n\n### Example Error Response\n\n**400 Bad Request**\n\n``` json\n{\n    \"status\": 400,\n    \"errors\": {\n        \"name\": [\n            \"The field Name must match the regular expression '\\\\w+'.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"SetParameter\",\n        \"controller\": \"Environments\",\n        \"name\": \"ParameterName()\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n\n ```\n\n---\n\n### Example Request (using Postman)\n\n**Method**: PUT  \n**URL**: `https://api.yourdomain.com/parameter/database_host?encode=true`  \n**Headers**:\n\n- `Content-Type`: `text/plain`\n    \n- `Accept`: `application/json`\n    \n\n**Body** (raw, Text):\n\n```\nnew.db.example.com\n\n ```\n\n---\n\n### Example cURL\n\n``` bash\ncurl -X PUT \"https://api.yourdomain.com/parameter/database_host?encode=true\" \\\n     -H \"Content-Type: text/plain\" \\\n     -H \"Accept: application/json\" \\\n     -d \"new.db.example.com\"\n\n ```\n\n---\n\n### Notes\n\n- **Parameter Name (****`{name}`****)**: The name of the parameter to be created or updated. It must match the regular expression `\\w+`, meaning it can only contain alphanumeric characters and underscores.\n    \n- **Query Parameter** **`encode`**: (Optional) Specifies whether the value should be encoded to Base64 before being stored. Defaults to `true` if not provided.\n    \n- **Request Body**: The value of the parameter as plain text. If not provided, the parameter will be set with an empty value.\n    \n- **Response Behavior**:\n    \n    - If the parameter **already exists**, the endpoint updates it and returns a `200 OK` status with the updated parameter details.\n        \n    - If the parameter **does not exist**, the endpoint creates it and returns a `201 Created` status with the new parameter details. A `Location` header pointing to the new resource is included in the response.\n        \n- **Error Handling**:\n    \n    - A `400 Bad Request` status is returned if the parameter name is invalid or if there are validation errors.\n        \n    - The error response includes detailed information about the validation errors, as shown in the example.\n        \n- **Content Types**:\n    \n    - **Request**: `text/plain`\n        \n    - **Response**: `application/json`\n        \n- **Idempotency**: This operation is idempotent. Making the same request multiple times will have the same effect as making it once.\n    \n- **Trace ID**: The `traceId` in the error response is a unique identifier for the request, useful for debugging and tracing in logs.\n    \n- **Route Data**: Provides context about where the error occurred, including the action method, controller, and the problematic parameter value.\n    \n\n---\n\n### Summary\n\n- **Purpose**: Use this endpoint to create or update parameters in the `SystemParameters` environment.\n    \n- **Input Requirements**:\n    \n    - The parameter `name` must match the regular expression `\\w+` (alphanumeric characters and underscores only).\n        \n    - The `encode` query parameter is optional and defaults to `true`.\n        \n    - The request body should contain the parameter value as plain text.\n        \n- **Successful Responses**:\n    \n    - `200 OK` when a parameter is updated.\n        \n    - `201 Created` when a parameter is created (includes a `Location` header).\n        \n- **Error Responses**:\n    \n    - `400 Bad Request` with detailed validation errors if input validation fails.\n        \n- **Content Types**:\n    \n    - **Request**: `text/plain`\n        \n    - **Response**: `application/json`\n        \n- **Idempotency**: The operation is idempotent; repeated identical requests have the same effect.\n    \n\n---\n\n### Quick Reference\n\n- **HTTP Method**: PUT\n    \n- **URL Pattern**: `/parameter/{name}?encode={encode}`\n    \n- **Required Path Parameters**:\n    \n    - `name`: The name of the parameter (must match `\\w+`).\n        \n- **Optional Query Parameters**:\n    \n    - `encode`: `true` or `false` (defaults to `true`).\n        \n- **Headers**:\n    \n    - `Content-Type`: `text/plain`\n        \n    - `Accept`: `application/json`\n        \n- **Request Body**:\n    \n    - The parameter value as plain text."
					},
					"response": []
				},
				{
					"name": "Get Environments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/environments",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments"
							]
						},
						"description": "### Endpoint\n\n`GET /api/v4/g4/environments`\n\n### Description\n\nThis endpoint retrieves all available environments along with their global configuration parameters. Each environment is represented as a collection of key-value pairs, where both the keys and values are strings. The data is returned in JSON format.\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully retrieved the environments and their global parameters.  \n_Content-Type_: `application/json`\n\n**Example Success Response**\n\n``` json\n{\n  \"production\": {\n    \"database_host\": \"prod-db.yourdomain.com\",\n    \"database_port\": \"5432\",\n    \"api_base_url\": \"https://api.yourdomain.com/v1\",\n    \"api_timeout\": \"30\"\n  },\n  \"development\": {\n    \"database_host\": \"dev-db.yourdomain.com\",\n    \"database_port\": \"5432\",\n    \"api_base_url\": \"https://api-dev.yourdomain.com/v1\",\n    \"api_timeout\": \"60\"\n  }\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: GET  \n**URL**: `https://api.yourdomain.com/api/v4/g4/environments`  \n**Headers**:\n\n- Accept: `application/json`\n    \n\n### Example cURL\n\n``` bash\ncurl -X GET \"https://api.yourdomain.com/api/v4/g4/environments\" \\\n     -H \"Accept: application/json\"\n\n ```\n\n### Notes\n\n- This endpoint retrieves environment-specific configurations as key-value pairs, where both the keys and values are strings.\n    \n- The response is structured as a dictionary, where each key is an environment name (e.g., \"production\", \"development\").\n    \n- Each environment contains key-value pairs such as API base URLs, database host details, and timeout configurations.\n    \n- Use this endpoint to fetch configuration details for different environments for application deployment and integration."
					},
					"response": []
				},
				{
					"name": "Get Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/environments/TempEnvironment",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"TempEnvironment"
							]
						},
						"description": "### Endpoint\n\n`GET /api/v4/g4/environments/{name}`\n\n### Description\n\nThis endpoint **retrieves detailed information** about a specific environment identified by its unique name. Clients can optionally specify whether the environment's parameters should be Base64-decoded before being returned. If the environment exists, its details are returned in JSON format with a `200 OK` response. If the environment does not exist, a `404 Not Found` response is returned with a detailed error message.\n\n### Parameters\n\n| **Parameter** | **Location** | **Type** | **Required** | **Description**                                                                                                                       |\n|---------------|--------------|----------|--------------|---------------------------------------------------------------------------------------------------------------------------------------|\n| `name`        | Path         | `string` | Yes          | The name of the environment to retrieve. Must match the regular expression `\\w+` (alphanumeric characters and underscores only).        |\n| `decode`      | Query        | `bool`   | No           | Specifies whether the environment's parameter values should be Base64-decoded before being returned. Defaults to `false`.               |\n\n### Responses\n\n**200 OK**  \n_Description_: Environment found and returned successfully.  \n_Content-Type_: `application/json`\n\n**404 Not Found**  \n_Description_: Environment not found with the specified name.  \n_Content-Type_: `application/json`\n\n### Example Success Responses\n\n**Example for 200 OK**\n\n```json\n{\n    \"database_host\": \"prod-db.yourdomain.com\",\n    \"database_port\": \"5432\",\n    \"api_base_url\": \"https://api.yourdomain.com/v1\",\n    \"api_timeout\": \"45\"\n}\n```\n\n**Example for 200 OK with Decoded Parameters**\n\n```json\n{\n    \"database_host\": \"cHJvZC1kYi55b3VyZG9tYWluLmNvbQ==\",\n    \"database_port\": \"NTQzMg==\",\n    \"api_base_url\": \"aHR0cHM6Ly9hcGkteW91cmRvbWFpbi5jb20vdjE=\",\n    \"api_timeout\": \"NDU=\"\n}\n```\n\n*Note: The parameter values are Base64-encoded when `decode=false` and decoded when `decode=true`.*\n\n### Example Error Responses\n\n**404 Not Found**\n\n```json\n{\n    \"status\": 404,\n    \"errors\": {\n        \"name\": [\n            \"The environment with the name 'NonExistentEnv' was not found.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"GetEnvironment\",\n        \"controller\": \"Environments\",\n        \"name\": \"NonExistentEnv\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n```\n\n### Example Request (using Postman)\n\n**Method**: GET  \n**URL**: `https://api.yourdomain.com/api/v4/g4/environments/Production?decode=true`  \n**Headers**:\n\n- `Accept`: `application/json`\n\n_No body is required for this request._\n\n---\n\n### Example cURL\n\n```bash\ncurl -X GET \"https://api.yourdomain.com/api/v4/environments/Production?decode=true\" \\\n     -H \"Accept: application/json\"\n```\n\n### Notes\n\n- **Environment Name (`{name}`)**:\n  - **Description**: The unique name of the environment to retrieve.\n  - **Format**: Must match the regular expression `\\w+`, meaning it can only contain alphanumeric characters and underscores.\n\n- **Decode (`decode`)**:\n  - **Description**: Determines whether the environment's parameter values should be Base64-decoded before being returned.\n  - **Default**: `false`\n  - **Usage**: Set to `true` if clients require the parameters in their original decoded form.\n\n- **Response Behavior**:\n  - **200 OK**: Returned when the environment is found. The response includes the environment's details in JSON format. If `decode=true`, parameter values are Base64-decoded.\n  - **404 Not Found**: Returned when the specified environment does not exist. The response includes a detailed error message to aid in troubleshooting.\n\n- **Error Handling**:\n  - **404 Not Found**:\n    - **Description**: Occurs if the environment with the specified name does not exist.\n    - **Structure**:\n      - `status`: HTTP status code (`404`).\n      - `errors`: Detailed error messages specifying the missing environment.\n      - `routeData`: Context about where the error occurred, including the action method, controller, and the problematic environment name.\n      - `traceId`: A unique identifier for the request, useful for debugging and tracing purposes.\n\n- **Content Types**:\n  - **Request**: None (since it's a GET request without a body).\n  - **Response**:\n    - `200 OK`: `application/json`\n    - `404 Not Found`: `application/json`\n\n- **Idempotency**:\n  - This operation is **idempotent**. Retrieving the same environment multiple times will consistently return the same result without causing any side effects.\n\n- **Trace ID**:\n  - The `traceId` included in error responses serves as a unique identifier for each request, facilitating easier debugging and log tracing.\n\n- **Route Data**:\n  - Provides contextual information about where the error occurred, including the action method and controller. This is useful for pinpointing issues during troubleshooting."
					},
					"response": []
				},
				{
					"name": "Get Parameter with Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 or 200\", ()=> {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/DocumentationEnvironment/parameter/DocumentationParameter1",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"DocumentationEnvironment",
								"parameter",
								"DocumentationParameter1"
							]
						},
						"description": "### Endpoint\n\n`PUT /parameter/{name}?encode={encode}`\n\n---\n\n### Description\n\nThis endpoint creates a new parameter or updates an existing one under the default environment `SystemParameters`. You can optionally encode the value in Base64 before storing it by setting the `encode` query parameter.\n\n---\n\n### Parameters\n\n| **Parameter** | **Location** | **Type** | **Required** | **Description** |\n| --- | --- | --- | --- | --- |\n| `name` | Path | `string` | Yes | The name of the parameter to be created or updated. Must match the regular expression `\\w+` (alphanumeric characters and underscores only). |\n| `encode` | Query | `boolean` | No | Specifies whether the value should be encoded to Base64 before being stored. Defaults to `true` if not provided. |\n| `value` | Body | `string` | No | The value of the parameter as plain text. If not provided, the parameter will be set with an empty value. |\n\n---\n\n### Responses\n\n**200 OK**  \n_Description_: Parameter successfully updated in `SystemParameters`. Returns the updated parameter details.  \n_Content-Type_: `application/json`\n\n**201 Created**  \n_Description_: Parameter successfully created in `SystemParameters`. Returns the newly created parameter details.  \n_Content-Type_: `application/json`  \n_Headers_:\n\n- `Location`: `/parameter/{name}`\n    \n\n**400 Bad Request**  \n_Description_: Invalid request due to input validation errors. The response includes details about the validation failures.  \n_Content-Type_: `application/json`\n\n---\n\n### Example Success Responses\n\n**Example for 200 OK**\n\n``` json\n{\n  \"message\": \"Parameter 'database_host' updated successfully in 'SystemParameters'.\",\n  \"parameter\": {\n    \"database_host\": \"new.db.example.com\"\n  }\n}\n\n ```\n\n**Example for 201 Created**\n\n``` json\n{\n  \"message\": \"Parameter 'api_key' created successfully in 'SystemParameters'.\",\n  \"parameter\": {\n    \"api_key\": \"12345-abcde-67890-fghij\"\n  }\n}\n\n ```\n\n---\n\n### Example Error Response\n\n**400 Bad Request**\n\n``` json\n{\n    \"status\": 400,\n    \"errors\": {\n        \"name\": [\n            \"The field Name must match the regular expression '\\\\w+'.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"SetParameter\",\n        \"controller\": \"Environments\",\n        \"name\": \"ParameterName()\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n\n ```\n\n---\n\n### Example Request (using Postman)\n\n**Method**: PUT  \n**URL**: `https://api.yourdomain.com/parameter/database_host?encode=true`  \n**Headers**:\n\n- `Content-Type`: `text/plain`\n    \n- `Accept`: `application/json`\n    \n\n**Body** (raw, Text):\n\n```\nnew.db.example.com\n\n ```\n\n---\n\n### Example cURL\n\n``` bash\ncurl -X PUT \"https://api.yourdomain.com/parameter/database_host?encode=true\" \\\n     -H \"Content-Type: text/plain\" \\\n     -H \"Accept: application/json\" \\\n     -d \"new.db.example.com\"\n\n ```\n\n---\n\n### Notes\n\n- **Parameter Name (****`{name}`****)**: The name of the parameter to be created or updated. It must match the regular expression `\\w+`, meaning it can only contain alphanumeric characters and underscores.\n    \n- **Query Parameter** **`encode`**: (Optional) Specifies whether the value should be encoded to Base64 before being stored. Defaults to `true` if not provided.\n    \n- **Request Body**: The value of the parameter as plain text. If not provided, the parameter will be set with an empty value.\n    \n- **Response Behavior**:\n    \n    - If the parameter **already exists**, the endpoint updates it and returns a `200 OK` status with the updated parameter details.\n        \n    - If the parameter **does not exist**, the endpoint creates it and returns a `201 Created` status with the new parameter details. A `Location` header pointing to the new resource is included in the response.\n        \n- **Error Handling**:\n    \n    - A `400 Bad Request` status is returned if the parameter name is invalid or if there are validation errors.\n        \n    - The error response includes detailed information about the validation errors, as shown in the example.\n        \n- **Content Types**:\n    \n    - **Request**: `text/plain`\n        \n    - **Response**: `application/json`\n        \n- **Idempotency**: This operation is idempotent. Making the same request multiple times will have the same effect as making it once.\n    \n- **Trace ID**: The `traceId` in the error response is a unique identifier for the request, useful for debugging and tracing in logs.\n    \n- **Route Data**: Provides context about where the error occurred, including the action method, controller, and the problematic parameter value.\n    \n\n---\n\n### Summary\n\n- **Purpose**: Use this endpoint to create or update parameters in the `SystemParameters` environment.\n    \n- **Input Requirements**:\n    \n    - The parameter `name` must match the regular expression `\\w+` (alphanumeric characters and underscores only).\n        \n    - The `encode` query parameter is optional and defaults to `true`.\n        \n    - The request body should contain the parameter value as plain text.\n        \n- **Successful Responses**:\n    \n    - `200 OK` when a parameter is updated.\n        \n    - `201 Created` when a parameter is created (includes a `Location` header).\n        \n- **Error Responses**:\n    \n    - `400 Bad Request` with detailed validation errors if input validation fails.\n        \n- **Content Types**:\n    \n    - **Request**: `text/plain`\n        \n    - **Response**: `application/json`\n        \n- **Idempotency**: The operation is idempotent; repeated identical requests have the same effect.\n    \n\n---\n\n### Quick Reference\n\n- **HTTP Method**: PUT\n    \n- **URL Pattern**: `/parameter/{name}?encode={encode}`\n    \n- **Required Path Parameters**:\n    \n    - `name`: The name of the parameter (must match `\\w+`).\n        \n- **Optional Query Parameters**:\n    \n    - `encode`: `true` or `false` (defaults to `true`).\n        \n- **Headers**:\n    \n    - `Content-Type`: `text/plain`\n        \n    - `Accept`: `application/json`\n        \n- **Request Body**:\n    \n    - The parameter value as plain text."
					},
					"response": []
				},
				{
					"name": "Remove Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/TempEnvironment",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"TempEnvironment"
							]
						},
						"description": "### Endpoint\n\n`DELETE /api/v4/g4/environments/{name}`\n\n### Description\n\nThis endpoint removes the specified environment by name. If the environment is successfully deleted, a `204 No Content` response is returned. If the environment is not found, a `404 Not Found` response is returned with an error message.\n\n### Parameters\n\n| **Parameter** | **Location** | **Type** | **Required** | **Description**                                                                                             |\n|---------------|--------------|----------|--------------|-------------------------------------------------------------------------------------------------------------|\n| `name`        | Path         | `string` | Yes          | The name of the environment to be removed. Must match the regular expression `\\w+` (alphanumeric characters and underscores only). |\n\n### Responses\n\n**204 No Content**  \n_Description_: The environment was successfully deleted.  \n_Content-Type_: `application/json`\n\n**404 Not Found**  \n_Description_: Environment not found with the specified name.  \n_Content-Type_: `application/json`\n\n### Example Success Responses\n\n**Example for 204 No Content**\n\n_No body content._\n\n### Example Error Responses\n\n**404 Not Found**\n\n```json\n{\n    \"status\": 404,\n    \"errors\": {\n        \"name\": [\n            \"The environment with the name 'NonExistentEnv' was not found.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"RemoveEnvironment\",\n        \"controller\": \"Environments\",\n        \"name\": \"NonExistentEnv\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n```\n\n### Example Request (using Postman)\n\n**Method**: DELETE  \n**URL**: `https://api.yourdomain.com/api/v4/g4/environments/Production`  \n**Headers**:\n\n- `Accept`: `application/json`\n\n### Example cURL\n\n```bash\ncurl -X DELETE \"https://api.yourdomain.com/api/v4/g4/environments/Production\" \\\n     -H \"Accept: application/json\"\n```\n\n### Notes\n\n- **Environment Name (`{name}`)**:\n  - **Description**: The name of the environment to be removed.\n  - **Format**: Must match the regular expression `\\w+`, meaning it can only contain alphanumeric characters and underscores.\n\n- **Response Behavior**:\n  - **204 No Content**: Returned when the environment is successfully deleted. There is no content in the response body.\n  - **404 Not Found**: Returned when the specified environment does not exist. The response includes detailed error information.\n\n- **Error Handling**:\n  - **404 Not Found**:\n    - **Description**: Occurs if the specified environment does not exist.\n    - **Structure**:\n      - `status`: HTTP status code (`404`).\n      - `errors`: Detailed error messages indicating which environment was not found.\n      - `routeData`: Context about where the error occurred, including the action method, controller, and the problematic environment name.\n      - `traceId`: A unique identifier for the request, useful for debugging and tracing purposes.\n\n- **Content Types**:\n  - **Request**: None (since it's a DELETE request without a body).\n  - **Response**:\n    - `204 No Content`: No content.\n    - `404 Not Found`: `application/json`\n\n- **Idempotency**:\n  - This operation is idempotent. Deleting the same environment multiple times will have the same effect as deleting it once. Subsequent DELETE requests for a non-existent environment will consistently return `404 Not Found`.\n\n- **Trace ID**:\n  - The `traceId` in error responses is a unique identifier for each request, aiding in debugging and tracing through logs.\n\n- **Route Data**:\n  - Provides additional context about where the error occurred, including the action method, controller, and the specific environment name that caused the error.\n"
					},
					"response": []
				},
				{
					"name": "Remove Parameter with Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/DocumentationEnvironment/parameter/DocumentationParameter1",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"DocumentationEnvironment",
								"parameter",
								"DocumentationParameter1"
							]
						},
						"description": "### Endpoint\n\n`DELETE /api/v4/g4/{environment}/parameter/{name}`\n\n### Description\n\nThis endpoint removes a parameter from the specified environment. If the parameter is found and successfully deleted, a `204 No Content` response is returned. If the parameter does not exist in the specified environment, a `404 Not Found` response is returned with an error message.\n\n### Parameters\n\n| **Parameter** | **Location** | **Type** | **Required** | **Description** |  \n|---|---|---|---|---|  \n| `environment` | Path | `string` | Yes | The name of the environment from which the parameter will be deleted. Must match the regular expression `\\w+` (alphanumeric characters and underscores only). |  \n| `name` | Path | `string` | Yes | The name of the parameter to delete. Must match the regular expression `\\w+` (alphanumeric characters and underscores only). |\n\n### Responses\n\n**204 No Content**  \n_Description_: The parameter was successfully deleted from the specified environment.  \n_Content-Type_: `application/json`\n\n**404 Not Found**  \n_Description_: The parameter was not found in the specified environment.  \n_Content-Type_: `application/json`\n\n### Example Success Response\n\n**204 No Content**\n\n_No body content._\n\n### Example Error Response\n\n**404 Not Found**\n\n``` json\n{\n    \"status\": 404,\n    \"errors\": {\n        \"name\": [\n            \"The parameter 'invalidName!' was not found in environment 'Production#'.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"DeleteParameter\",\n        \"controller\": \"Environments\",\n        \"environment\": \"Production#\",\n        \"name\": \"invalidName!\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: DELETE  \n**URL**: `https://api.yourdomain.com/Production/parameter/database_host`  \n**Headers**:\n\n- `Accept`: `application/json`\n    \n\n### Example cURL\n\n``` bash\ncurl -X DELETE \"https://api.yourdomain.com/Production/parameter/database_host\" \\\n     -H \"Accept: application/json\"\n\n ```\n\n### Notes\n\n- **Environment (****`{environment}`****)**:\n    \n    - **Description**: Specifies the environment from which the parameter will be deleted.\n        \n    - **Format**: Must match the regular expression `\\w+`, meaning it can only contain alphanumeric characters and underscores.\n        \n- **Parameter Name (****`{name}`****)**:\n    \n    - **Description**: The name of the parameter to delete.\n        \n    - **Format**: Must match the regular expression `\\w+`, meaning it can only contain alphanumeric characters and underscores.\n        \n- **Response Behavior**:\n    \n    - **204 No Content**: Returned when the parameter is successfully deleted. There is no content in the response body.\n        \n    - **404 Not Found**: Returned when the specified parameter does not exist in the given environment. The response includes detailed error information.\n        \n- **Error Handling**:\n    \n    - The `404 Not Found` response includes:\n        \n        - `status`: HTTP status code (`404`).\n            \n        - `errors`: Detailed error messages indicating which parameter was not found.\n            \n        - `routeData`: Contextual information about where the error occurred, including the action, controller, environment, and parameter name.\n            \n        - `traceId`: A unique identifier for the request, useful for debugging and tracing purposes.\n            \n- **Content Types**:\n    \n    - **Request**: None (since it's a DELETE request without a body).\n        \n    - **Response**:\n        \n        - `204 No Content`: No content in the response body.\n            \n        - `404 Not Found`: `application/json`\n            \n- **Idempotency**:\n    \n    - This operation is idempotent. Deleting the same parameter multiple times will have the same effect as deleting it once. Subsequent DELETE requests for a non-existent parameter will consistently return `404 Not Found`.\n        \n- **Trace ID**:\n    \n    - The `traceId` in error responses is a unique identifier for each request, aiding in debugging and tracing through logs.\n        \n- **Route Data**:\n    \n    - Provides additional context about where the error occurred, including the action method, controller, environment, and the specific parameter name that caused the error."
					},
					"response": []
				},
				{
					"name": "Clear Environments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments"
							]
						},
						"description": "### Endpoint\n\n`DELETE /api/v4/g4/environments`\n\n### Description\n\nThis endpoint removes **all environments** along with their associated parameters. Upon successful removal of all environments, a `204 No Content` response is returned, indicating that the operation was successful and there is no additional content to send in the response body.\n\n### Parameters\n\nThis endpoint **does not require any parameters**.\n\n### Responses\n\n**204 No Content**  \n_Description_: All environments were successfully cleared.  \n_Content-Type_: `application/json`\n\n### Example Success Responses\n\n**Example for 204 No Content**\n\n_No body content._\n\n### Example Request (using Postman)\n\n**Method**: DELETE  \n**URL**: `https://api.yourdomain.com/api/v4/g4/environments`  \n**Headers**:\n\n- `Accept`: `application/json`\n\n_No body is required for this request._\n\n### Example cURL\n\n```bash\ncurl -X DELETE \"https://api.yourdomain.com/api/v4/g4/environments\" \\\n     -H \"Accept: application/json\"\n```\n\n### Notes\n\n- **No Parameters Required**:\n  - This endpoint does not require any path, query, or body parameters. It operates on the entire collection of environments.\n  \n- **Response Behavior**:\n  - **204 No Content**: Indicates that all environments were successfully deleted. Since there is no content to return, the response body is empty.\n  \n- **Error Handling**:\n  - This specific request does **not** return a `400 Bad Request` or `404 Not Found` response. It performs the deletion operation regardless of the current state. If there are no environments to delete, the `204 No Content` response still signifies a successful operation.\n  \n- **Content Types**:\n  - **Request**: None (DELETE request without a body).\n  - **Response**: \n    - `204 No Content`: No content in the response body.\n  \n- **Idempotency**:\n  - This operation is **idempotent**. Performing the same DELETE request multiple times will have the same effect as making it once. Subsequent DELETE requests after the initial successful deletion will still return `204 No Content`, indicating that the desired state (no environments) has been achieved.\n  \n- **Trace ID**:\n  - While not applicable in successful responses, if any internal errors occur during the operation, a `traceId` may be included in error responses to aid in debugging and tracing through logs.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Integration",
			"item": [
				{
					"name": "Get Cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/cache",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"cache"
							]
						},
						"description": "### Endpoint\n\n`GET /api/v4/g4/integration/cache`\n\n### Description\n\nThis endpoint retrieves the current plugin cache from the G4 engine integration. The cached data is stored in a dictionary format, where each plugin type is associated with multiple plugin entries. Each plugin entry includes both a Markdown document and a plugin manifest object. The cache is returned in JSON format. The cache is stored for a duration of 60 seconds and cached at the client side.\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully retrieved the plugin cache.  \n_Content-Type_: `application/json`\n\n**Example Success Response**\n\n``` json\n{\n  \"action\": {\n    \"document\": \"# Action Plugin Documentation\\nThis document provides information about action plugins.\",\n    \"manifest\": {\n      \"key\": \"InvokeClick\",\n      \"pluginType\": \"Action\",\n      \"description\": [\n        \"### Purpose\",\n        \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n      ],\n      \"author\": {\n        \"link\": \"https://www.linkedin.com/in/************/\",\n        \"name\": \"*********\"\n      },\n      \"categories\": [\n        \"Ui\",\n        \"Browser\"\n      ],\n      \"protocol\": {\n        \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n      },\n      \"examples\": [\n        {\n          \"description\": [\n            \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n          ],\n          \"rule\": {\n            \"locator\": \"CssSelector\",\n            \"onElement\": \"#ClickButton\",\n            \"pluginName\": \"InvokeClick\"\n          }\n        }\n      ]\n    }\n  },\n  \"validation\": {\n    \"document\": \"# Validation Plugin Documentation\\nThis document provides information about validation plugins.\",\n    \"manifest\": {\n      \"key\": \"CheckElementExists\",\n      \"pluginType\": \"Validation\",\n      \"description\": \"A plugin that checks if an element exists on the page.\"\n    }\n  }\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: GET  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/cache`  \n**Headers**:\n\n- Accept: `application/json`\n    \n\n### Example cURL\n\n``` bash\ncurl -X GET \"https://api.yourdomain.com/api/v4/g4/integration/cache\" \\\n     -H \"Accept: application/json\"\n\n ```\n\n### Notes\n\n- The cache is stored for 60 seconds and is client-cached.\n    \n- The cache data includes plugin information structured as a dictionary, where the top-level keys are plugin types (e.g., \"action\", \"validation\").\n    \n- Each plugin type contains:\n    \n    - A `document` field with the plugin's documentation in Markdown format.\n        \n    - A `manifest` field containing the plugin manifest object, which includes metadata such as plugin key, type, description, author, and examples."
					},
					"response": []
				},
				{
					"name": "Get Cache By Repositories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"ExternalRepository\",\r\n        \"url\": \"{{ExternalEndpoint}}\",\r\n        \"version\": 4\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/integration/cache",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"cache"
							]
						},
						"description": "### Endpoint\n\n`POST /api/v4/g4/integration/cache`\n\n### Description\n\nThis endpoint retrieves the cached plugin data from the specified external repositories. The cache is structured in a dictionary format, where each plugin type contains multiple plugin entries, including a Markdown document, the associated plugin manifest, and the external repository information from which the cache entry was retrieved. The data is returned in JSON format and is client-cached for 60 seconds.\n\n### Body Parameters\n\nThe request body must be an array of external repository details from which the plugin cache will be retrieved.\n\n| Field | Type | Required | Description |\n| --- | --- | --- | --- |\n| version | int | Yes | The version of the repository. |\n| name | string | Yes | The name of the repository (max 155 characters). |\n| url | string | Yes | The URL where the repository is located. |\n| capabilities | object | No | Optional capabilities such as SSL support and connection limits. |\n| credentials | object | No | Optional authentication credentials for accessing the repository. |\n| headers | object | No | Optional HTTP headers to be sent with the request. |\n| timeout | double | No | Optional timeout value in seconds for the repository. |\n\n#### Example Body\n\n``` json\n[\n  {\n    \"name\": \"MainAPIService\",\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n  },\n  {\n    \"name\": \"SecondaryAPIService\",\n    \"url\": \"http://localhost:8888\",\n    \"version\": 3\n  }\n]\n\n ```\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully retrieved the plugin cache from the specified repositories.  \n_Content-Type_: `application/json`\n\n**Example Success Response**\n\n``` json\n{\n  \"action\": {\n    \"document\": \"# Action Plugin Documentation\\nThis document provides information about action plugins.\",\n    \"manifest\": {\n      \"key\": \"InvokeClick\",\n      \"pluginType\": \"Action\",\n      \"description\": [\n        \"### Purpose\",\n        \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n      ],\n      \"author\": {\n        \"link\": \"https://www.linkedin.com/in/************/\",\n        \"name\": \"*********\"\n      },\n      \"categories\": [\n        \"Ui\",\n        \"Browser\"\n      ],\n      \"protocol\": {\n        \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n      },\n      \"examples\": [\n        {\n          \"description\": [\n            \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n          ],\n          \"rule\": {\n            \"locator\": \"CssSelector\",\n            \"onElement\": \"#ClickButton\",\n            \"pluginName\": \"InvokeClick\"\n          }\n        }\n      ]\n    },\n    \"externalRepository\": {\n      \"headers\": {},\n      \"name\": \"MainAPIService\",\n      \"timeout\": 300,\n      \"url\": \"http://localhost:9999\",\n      \"version\": 4\n    }\n  },\n  \"validation\": {\n    \"document\": \"# Validation Plugin Documentation\\nThis document provides information about validation plugins.\",\n    \"manifest\": {\n      \"key\": \"CheckElementExists\",\n      \"pluginType\": \"Validation\",\n      \"description\": \"A plugin that checks if an element exists on the page.\"\n    }\n  }\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: POST  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/cache`  \n**Headers**:\n\n- Content-Type: `application/json`\n    \n\n**Body**:\n\n``` json\n[\n  {\n    \"name\": \"MainAPIService\",\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n  },\n  {\n    \"name\": \"SecondaryAPIService\",\n    \"url\": \"http://localhost:8888\",\n    \"version\": 3\n  }\n]\n\n ```\n\n### Example cURL\n\n``` bash\ncurl -X POST \"https://api.yourdomain.com/api/v4/g4/integration/cache\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[{\n           \"name\": \"MainAPIService\",\n           \"url\": \"http://localhost:9999\",\n           \"version\": 4\n         },\n           \"name\": \"SecondaryAPIService\",\n           \"url\": \"http://localhost:8888\",\n           \"version\": 3\n         }]'\n\n ```\n\n### Notes\n\n- The `repository` field in the body is required and should be an array of external repository details.\n    \n- Each cache entry includes:\n    \n    - A `document` field with the plugin's documentation in Markdown format.\n        \n    - A `manifest` field containing the plugin manifest object.\n        \n    - An `externalRepository` field with details of the external repository from which the cache entry was retrieved."
					},
					"response": []
				},
				{
					"name": "Get Document By Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/documents/key/InvokeClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"documents",
								"key",
								"InvokeClick"
							]
						},
						"description": "### Endpoint\n\n**GET** `/api/v4/g4/integration/documents/key/{key}`\n\n### Description\n\nThis endpoint retrieves the document associated with the specified plugin name from the G4 engine integration. If multiple plugins share the same name, the document from the first matching plugin is returned.\n\n### Path Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| key | string | Yes | The name of the plugin identifying the document to retrieve. |\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully retrieved the document.  \n_Content-Type_: `text/markdown`\n\n**Example Success Response**\n\n``` markdown\n# Example Plugin Documentation\n## Overview\nThis plugin provides functionality for...\n## Installation\nSteps to install the Example Plugin...\n## Usage\nInstructions on how to use the Example Plugin...\n\n ```\n\n**404 Not Found**  \n_Description_: Document not found for the provided plugin name.  \n_Content-Type_: `application/json`\n\n**Example Error Response**\n\n``` json\n{\n  \"status\": 404,\n  \"traceId\": \"0HN729FN8M3ET:00000001\",\n  \"errors\": {\n    \"key\": [\n      \"Document with plugin name 'InvokeClick1' not found.\"\n    ]\n  },\n  \"request\": \"GET /api/v4/g4/integration/documents/key/InvokeClick1 HTTP/1.1\",\n  \"routeData\": {}\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: GET  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/documents/key/InvokeClick1`  \n**Headers**:\n\n- Accept: `text/markdown`\n    \n\n### Example cURL\n\n``` bash\ncurl -X GET \"https://api.yourdomain.com/api/v4/g4/integration/documents/key/InvokeClick1\" \\\n     -H \"Accept: text/markdown\"\n\n ```\n\n### Notes\n\n- Ensure that the `key` parameter matches the exact name of the plugin (case insensitive).\n    \n- The response content type for a successful request is `text/markdown`.\n    \n- If the document is not found, a `404 Not Found` status is returned with a detailed error message."
					},
					"response": []
				},
				{
					"name": "Get Document By Key & Repository",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"capabilities\": {\r\n        \"supportsSSL\": true,\r\n        \"maxConnections\": 10\r\n    },\r\n    \"credentials\": {\r\n        \"username\": \"admin_user\",\r\n        \"password\": \"Str0ngP@ssw0rd!\"\r\n    },\r\n    \"headers\": {\r\n        \"Accept\": \"application/json\"\r\n    },\r\n    \"name\": \"MainAPIService\",\r\n    \"timeout\": 300.0,\r\n    \"url\": \"http://localhost:9999\",\r\n    \"version\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/integration/documents/key/InvokePythonClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"documents",
								"key",
								"InvokePythonClick"
							]
						},
						"description": "### Endpoint\n\n**POST** `/api/v4/g4/integration/documents/key/{key}`\n\n### Description\n\nThis endpoint retrieves the document associated with the specified plugin name from a specific external repository within the G4 engine integration. If multiple plugins share the same name within the specified repository, the document from the first matching plugin is returned.\n\n### Path Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| key | string | Yes | The name of the plugin identifying the document to retrieve. |\n\n### Body Parameters\n\nThe request body must include the external repository details.\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| version | int | Yes | The version of the repository. |\n| name | string | Yes | The name of the repository (max 155 characters). |\n| url | string | Yes | The URL where the repository is located. |\n| capabilities | object | No | Optional capabilities such as SSL support and connection limits. |\n| credentials | object | No | Optional authentication credentials for accessing the repository. |\n| headers | object | No | Optional HTTP headers to be sent with the request. |\n| timeout | double | No | Optional timeout value in seconds for the repository. |\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully retrieved the document.  \n_Content-Type_: `text/markdown`\n\n**Example Success Response**\n\n``` markdown\n# Example Plugin Documentation\n## Overview\nThis plugin provides advanced functionality for...\n## Installation\nSteps to install the Example Plugin...\n## Usage\nInstructions on how to use the Example Plugin...\n\n ```\n\n**404 Not Found**  \n_Description_: Document not found for the provided plugin name and repository.  \n_Content-Type_: `application/json`\n\n**Example Error Response**\n\n``` json\n{\n  \"status\": 404,\n  \"traceId\": \"0HN729FN8M3ET:00000001\",\n  \"errors\": {\n    \"key\": [\n      \"Document with plugin name 'InvokeClick1' not found on repository https://repository.example.com.\"\n    ]\n  },\n  \"request\": \"POST /integration/documents/key/InvokeClick1 HTTP/1.1\",\n  \"routeData\": {}\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: POST  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/documents/key/ExamplePlugin`  \n**Headers**:\n\n- Content-Type: `application/json`\n    \n\n**Body**:\n\n``` json\n{\n    \"url\": \"https://repository.example.com\",\n    \"name\": \"External Python Repository\",\n    \"credentials\": {\n        \"username\": \"user\",\n        \"password\": \"pass\"\n    }\n}\n\n ```\n\n### Example cURL\n\n``` bash\ncurl -X POST \"https://api.yourdomain.com/api/v4/g4/integration/documents/key/ExamplePlugin\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"url\": \"https://repository.example.com\",\n           \"name\": \"External Python Repository\",\n           \"credentials\": {\n               \"username\": \"user\",\n               \"password\": \"pass\"\n           }\n         }'\n\n ```\n\n### Example Error Response\n\n``` json\n{\n  \"status\": 404,\n  \"traceId\": \"0HN729FN8M3ET:00000001\",\n  \"errors\": {\n    \"key\": [\n      \"Document with plugin name 'InvokeClick1' not found on repository https://repository.example.com.\"\n    ]\n  },\n  \"request\": \"POST /integration/documents/key/InvokeClick1 HTTP/1.1\",\n  \"routeData\": {}\n}\n\n ```\n\n### Notes\n\n- Ensure that both the `key` parameter and the repository information match the exact name and repository of the plugin.\n    \n- The request body must include the external repository details in the `G4ExternalRepositoryModel` format.\n    \n- The response content type for a successful request is `text/markdown`.\n    \n- If the document is not found, a `404 Not Found` status is returned with detailed error messages specifying both the plugin name and repository."
					},
					"response": []
				},
				{
					"name": "Get Document By Type, Key & Repository",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"capabilities\": {\r\n        \"supportsSSL\": true,\r\n        \"maxConnections\": 10\r\n    },\r\n    \"credentials\": {\r\n        \"username\": \"admin_user\",\r\n        \"password\": \"Str0ngP@ssw0rd!\"\r\n    },\r\n    \"headers\": {\r\n        \"Accept\": \"application/json\"\r\n    },\r\n    \"name\": \"MainAPIService\",\r\n    \"timeout\": 300.0,\r\n    \"url\": \"http://localhost:9999\",\r\n    \"version\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/integration/documents/type/action/key/InvokePythonClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"documents",
								"type",
								"action",
								"key",
								"InvokePythonClick"
							]
						},
						"description": "### Endpoint\n\n`POST /api/v4/g4/integration/documents/type/{pluginType}/key/{key}`\n\n### Description\n\nThis endpoint retrieves the Markdown documentation for a specific plugin based on its type, name, and external repository information. The plugin is identified by the `pluginType` and `key` path parameters, and the documentation is fetched from the specified external repository provided in the request body. If the documentation is found, it is returned in Markdown format. If not found, a 404 response with detailed error information is returned.\n\n### Path Parameters\n\n| Name | Type | Location | Required | Description |\n| --- | --- | --- | --- | --- |\n| `pluginType` | string | path | Yes | The type or category of the plugin to retrieve documentation for. |\n| `key` | string | path | Yes | The name of the plugin identifying the documentation to retrieve. |\n\n### Body Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| version | int | Yes | The version of the repository. |\n| name | string | Yes | The name of the repository (max 155 characters). |\n| url | string | Yes | The URL where the repository is located. |\n| capabilities | object | No | Optional capabilities such as SSL support and connection limits. |\n| credentials | object | No | Optional authentication credentials for accessing the repository. |\n| headers | object | No | Optional HTTP headers to be sent with the request. |\n| timeout | double | No | Optional timeout value in seconds for the repository. |\n\n### Responses\n\n- **200 OK**\n    \n    - **Description**: Successfully retrieved the plugin Markdown documentation.\n        \n    - **Content**:\n        \n        - **Media Type**: `text/markdown`\n            \n        - **Body**: The Markdown content of the plugin documentation.\n            \n- **404 Not Found**\n    \n    - **Description**: Plugin Markdown documentation not found for the provided `pluginType`, `key`, or repository.\n        \n    - **Content**:\n        \n        - **Media Type**: `application/json`\n            \n        - **Body**:\n            \n            ``` json\n                        {\n                          \"status\": 404,\n                          \"traceId\": \"0HN729FN8M3ET:00000001\",\n                          \"errors\": {\n                              \"key\": [\n                                  \"Plugin Markdown documentation with plugin name 'ExamplePlugin' not found on repository 'https://repository.example.com' for plugin type 'External'.\"\n                              ]\n                          },\n                          \"request\": \"POST /api/v4/g4/integration/documents/type/External/key/ExamplePlugin HTTP/1.1\",\n                          \"routeData\": {}\n                        }\n            \n             ```\n            \n\n### Example Request\n\n``` http\nPOST https://api.yourdomain.com/api/v4/g4/integration/documents/type/External/key/ExamplePlugin\nContent-Type: application/json\n{\n    \"url\": \"https://repository.example.com\",\n    \"credentials\": {\n        \"username\": \"user\",\n        \"password\": \"pass\"\n    }\n}\n\n ```\n\n### Example Successful Response\n\n``` http\nHTTP/1.1 200 OK\nContent-Type: text/markdown\n# Example Plugin Documentation\n## Overview\nThis plugin provides advanced functionality for...\n## Installation\nSteps to install the Example Plugin...\n## Usage\nInstructions on how to use the Example Plugin...\n\n ```\n\n### Example Error Response\n\n``` http\nHTTP/1.1 404 Not Found\nContent-Type: application/json\n{\n    \"status\": 404,\n    \"traceId\": \"0HN729FN8M3ET:00000001\",\n    \"errors\": {\n        \"key\": [\n            \"Plugin Markdown documentation with plugin name 'ExamplePlugin' not found on repository 'https://repository.example.com' for plugin type 'External'.\"\n        ]\n    },\n    \"request\": \"POST /api/v4/g4/integration/documents/type/External/key/ExamplePlugin HTTP/1.1\",\n    \"routeData\": {}\n}\n\n ```\n\n### Notes\n\n- Ensure the `pluginType`, `key`, and repository details are correct.\n    \n- The request body must include the repository information in the `G4ExternalRepositoryModel` format.\n    \n- The successful response will return Markdown content. If not found, a 404 error is returned with details on the missing plugin and repository."
					},
					"response": []
				},
				{
					"name": "Get Manifest By Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/manifests/key/InvokeClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"manifests",
								"key",
								"InvokeClick"
							]
						},
						"description": "### Endpoint\n\n`GET /api/v4/g4/integration/manifests/key/{key}`\n\n### Description\n\nThis endpoint retrieves the plugin manifest, including optional Markdown documentation, identified by the specified `key` (plugin name). Optionally, the response can include specific fields by passing a comma-separated list of field names using the `expandFields` query parameter. The manifest data is returned in JSON format if found. If the manifest is not found, a 404 error response is returned with detailed error information.\n\n### Path Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| key | string | Yes | The unique name of the plugin to retrieve. |\n\n### Query Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| expandFields | string | No | Comma-separated list of fields to include in the response. |\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully retrieved the plugin manifest.  \n_Content-Type_: `application/json`\n\n**Example Success Response**\n\n``` json\n{\n  \"key\": \"InvokeClick\",\n  \"pluginType\": \"Action\",\n  \"description\": [\n    \"### Purpose\",\n    \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n  ],\n  \"author\": {\n    \"link\": \"https://www.linkedin.com/in/************/\",\n    \"name\": \"*********\"\n  },\n  \"categories\": [\n    \"Ui\",\n    \"Browser\"\n  ],\n  \"protocol\": {\n    \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n  },\n  \"examples\": [\n    {\n      \"description\": [\n        \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n      ],\n      \"rule\": {\n        \"locator\": \"CssSelector\",\n        \"onElement\": \"#ClickButton\",\n        \"pluginName\": \"InvokeClick\"\n      }\n    }\n  ]\n}\n\n ```\n\n**404 Not Found**  \n_Description_: Plugin manifest not found for the provided plugin name.  \n_Content-Type_: `application/problem+json`\n\n**Example Error Response**\n\n``` json\n{\n  \"status\": 404,\n  \"traceId\": \"0HN729FN8M3ET:00000001\",\n  \"errors\": {\n    \"key\": [\n      \"Plugin manifest with plugin name 'InvokeClick1' not found.\"\n    ]\n  },\n  \"routeData\": {\n    \"action\": \"GetManifest\",\n    \"controller\": \"Integration\",\n    \"key\": \"InvokeClick1\"\n  }\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: GET  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/manifests/key/InvokeClick1?expandFields=description,examples`  \n**Headers**:\n\n- Content-Type: `application/json`\n    \n\n### Example cURL\n\n``` bash\ncurl -X GET \"https://api.yourdomain.com/api/v4/g4/integration/manifests/key/InvokeClick1?expandFields=description,examples\" \\\n     -H \"Content-Type: application/json\"\n\n ```\n\n### Notes\n\n- The `key` parameter is mandatory for the request.\n    \n- The `expandFields` query parameter allows you to specify which fields to include in the response.\n    \n- If the plugin manifest is not found, the 404 error response will provide details on the missing plugin key used in the request."
					},
					"response": []
				},
				{
					"name": "Get Manifest By Key & Repository",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"capabilities\": {\r\n        \"supportsSSL\": true,\r\n        \"maxConnections\": 10\r\n    },\r\n    \"credentials\": {\r\n        \"username\": \"admin_user\",\r\n        \"password\": \"Str0ngP@ssw0rd!\"\r\n    },\r\n    \"headers\": {\r\n        \"Accept\": \"application/json\"\r\n    },\r\n    \"name\": \"MainAPIService\",\r\n    \"timeout\": 300.0,\r\n    \"url\": \"http://localhost:9999\",\r\n    \"version\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/integration/manifests/key/InvokePythonClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"manifests",
								"key",
								"InvokePythonClick"
							]
						},
						"description": "### Endpoint\n\n`POST /api/v4/g4/integration/manifests/key/{key}`\n\n### Description\n\nThis endpoint retrieves the plugin manifest identified by the specified `key` (plugin name) and external repository information provided in the request body. Optionally, the response can include specific fields by passing a comma-separated list of field names using the `expandFields` query parameter. The manifest data is returned in JSON format if found. If the manifest is not found, a 404 error response is returned with detailed error information.\n\n### Path Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| key | string | Yes | The unique name of the plugin to retrieve. |\n\n### Query Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| expandFields | string | No | Comma-separated list of fields to include in the response. |\n\n### Body Parameters\n\nThe request body must include the external repository details to identify where the plugin is located.\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| version | int | Yes | The version of the repository. If not provided, it will default to `0`. |\n| name | string | Yes | The name of the repository (max 155 characters). |\n| url | string | Yes | The URL where the repository is located. |\n| capabilities | object | No | Optional capabilities such as SSL support and connection limits. |\n| credentials | object | No | Optional authentication credentials for accessing the repository. |\n| headers | object | No | Optional HTTP headers to be sent with the request. |\n| timeout | double | No | Optional timeout value in seconds for the repository. |\n\n### Example Body\n\n``` json\n{\n    \"capabilities\": {\n        \"supportsSSL\": true,\n        \"maxConnections\": 10\n    },\n    \"credentials\": {\n        \"username\": \"admin_user\",\n        \"password\": \"Str0ngP@ssw0rd!\"\n    },\n    \"headers\": {\n        \"Accept\": \"application/json\"\n    },\n    \"name\": \"MainAPIService\",\n    \"timeout\": 300.0,\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n}\n\n ```\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully retrieved the plugin manifest.  \n_Content-Type_: `application/json`\n\n**Example Success Response**\n\n``` json\n{\n  \"key\": \"InvokeClick\",\n  \"pluginType\": \"Action\",\n  \"description\": [\n    \"### Purpose\",\n    \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n  ],\n  \"author\": {\n    \"link\": \"https://www.linkedin.com/in/************/\",\n    \"name\": \"*********\"\n  },\n  \"categories\": [\n    \"Ui\",\n    \"Browser\"\n  ],\n  \"protocol\": {\n    \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n  },\n  \"examples\": [\n    {\n      \"description\": [\n        \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n      ],\n      \"rule\": {\n        \"locator\": \"CssSelector\",\n        \"onElement\": \"#ClickButton\",\n        \"pluginName\": \"InvokeClick\"\n      }\n    }\n  ]\n}\n\n ```\n\n**404 Not Found**  \n_Description_: Plugin manifest not found for the provided plugin name and repository.  \n_Content-Type_: `application/problem+json`\n\n**Example Error Response**\n\n``` json\n{\n  \"status\": 404,\n  \"traceId\": \"0HN729FN8M3ET:00000001\",\n  \"errors\": {\n    \"key\": [\n      \"Plugin manifest with key 'InvokeClick1' not found on repository 'http://localhost:9999'.\"\n    ]\n  },\n  \"request\": {\n    \"name\": \"MainAPIService\",\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n  },\n  \"routeData\": {\n    \"action\": \"GetManifest\",\n    \"controller\": \"Integration\",\n    \"key\": \"InvokeClick1\"\n  }\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: POST  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/manifests/key/InvokeClick1?expandFields=description,examples`  \n**Headers**:\n\n- Content-Type: `application/json`\n    \n\n**Body**:\n\n``` json\n{\n    \"capabilities\": {\n        \"supportsSSL\": true,\n        \"maxConnections\": 10\n    },\n    \"credentials\": {\n        \"username\": \"admin_user\",\n        \"password\": \"Str0ngP@ssw0rd!\"\n    },\n    \"headers\": {\n        \"Accept\": \"application/json\"\n    },\n    \"name\": \"MainAPIService\",\n    \"timeout\": 300.0,\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n}\n\n ```\n\n### Example cURL\n\n``` bash\ncurl -X POST \"https://api.yourdomain.com/api/v4/g4/integration/manifests/key/InvokeClick1?expandFields=description,examples\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"capabilities\": {\n             \"supportsSSL\": true,\n             \"maxConnections\": 10\n           },\n           \"credentials\": {\n             \"username\": \"admin_user\",\n             \"password\": \"Str0ngP@ssw0rd!\"\n           },\n           \"headers\": {\n             \"Accept\": \"application/json\"\n           },\n           \"name\": \"MainAPIService\",\n           \"timeout\": 300.0,\n           \"url\": \"http://localhost:9999\",\n           \"version\": 4\n         }'\n\n ```\n\n### Notes\n\n- The `key` and `repository` details are mandatory for the request.\n    \n- The `name`, `url`, and `version` fields in the repository are required. If the `version` is not provided, it will default to `0`.\n    \n- The `expandFields` query parameter allows you to specify which fields to include in the response.\n    \n- Optional fields such as `capabilities`, `credentials`, and `headers` can be used to provide additional configuration for the repository.\n    \n- If the plugin manifest is not found, the 404 error response will provide details on the missing plugin key and repository used in the request."
					},
					"response": []
				},
				{
					"name": "Get Manifest By Type & Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/manifests/type/action/key/InvokeClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"manifests",
								"type",
								"action",
								"key",
								"InvokeClick"
							]
						},
						"description": "### Endpoint\n\n`GET /api/v4/g4/integration/manifests/type/{pluginType}/key/{key}`\n\n### Description\n\nThis endpoint retrieves the plugin manifest identified by the specified `pluginType` (plugin type) and `key` (plugin name). Optionally, the response can include specific fields by passing a comma-separated list of field names using the `expandFields` query parameter. The manifest data is returned in JSON format if found. If the manifest is not found, a 404 error response is returned with detailed error information.\n\n### Path Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| pluginType | string | Yes | The type/category of the plugin to retrieve. |\n| key | string | Yes | The unique name of the plugin to retrieve. |\n\n### Query Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| expandFields | string | No | Comma-separated list of fields to include in the response. |\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully retrieved the plugin manifest.  \n_Content-Type_: `application/json`\n\n**Example Success Response**\n\n``` json\n{\n  \"key\": \"InvokeClick\",\n  \"pluginType\": \"Action\",\n  \"description\": [\n    \"### Purpose\",\n    \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n  ],\n  \"author\": {\n    \"link\": \"https://www.linkedin.com/in/************/\",\n    \"name\": \"*********\"\n  },\n  \"categories\": [\n    \"Ui\",\n    \"Browser\"\n  ],\n  \"protocol\": {\n    \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n  },\n  \"examples\": [\n    {\n      \"description\": [\n        \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n      ],\n      \"rule\": {\n        \"locator\": \"CssSelector\",\n        \"onElement\": \"#ClickButton\",\n        \"pluginName\": \"InvokeClick\"\n      }\n    }\n  ]\n}\n\n ```\n\n**404 Not Found**  \n_Description_: Plugin manifest not found for the provided plugin type and name.  \n_Content-Type_: `application/problem+json`\n\n**Example Error Response**\n\n``` json\n{\n  \"status\": 404,\n  \"traceId\": \"0HN729FN8M3ET:00000001\",\n  \"errors\": {\n    \"key\": [\n      \"Plugin manifest with key 'InvokeClick1' not found for plugin type 'Action'.\"\n    ]\n  },\n  \"routeData\": {\n    \"action\": \"GetManifest\",\n    \"controller\": \"Integration\",\n    \"pluginType\": \"Action\",\n    \"key\": \"InvokeClick1\"\n  }\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: GET  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/manifests/type/Action/key/InvokeClick1?expandFields=description,examples`  \n**Headers**:\n\n- Content-Type: `application/json`\n    \n\n### Example cURL\n\n``` bash\ncurl -X GET \"https://api.yourdomain.com/api/v4/g4/integration/manifests/type/Action/key/InvokeClick1?expandFields=description,examples\" \\\n     -H \"Content-Type: application/json\"\n\n ```\n\n### Notes\n\n- The `pluginType` and `key` details are mandatory for the request.\n    \n- The `expandFields` query parameter allows you to specify which fields to include in the response.\n    \n- If the plugin manifest is not found, the 404 error response will provide details on the missing plugin type and key used in the request."
					},
					"response": []
				},
				{
					"name": "Get Manifest By Type, Key & Repository",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"ExternalRepository\",\r\n    \"url\": \"{{ExternalEndpoint}}\",\r\n    \"version\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/integration/manifests/type/action/key/InvokePythonClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"manifests",
								"type",
								"action",
								"key",
								"InvokePythonClick"
							]
						},
						"description": "### Endpoint\n\n`POST /api/v4/g4/integration/manifests/type/{pluginType}/key/{key}`\n\n### Description\n\nThis endpoint retrieves the plugin manifest identified by the specified `pluginType`, `key`, and external repository information provided in the request body. The manifest data is returned in JSON format if found. If the manifest is not found, a 404 error response is returned with detailed error information. Optionally, you can include specific fields in the response by passing a comma-separated list of field names using the `expandFields` query parameter.\n\n### Path Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| pluginType | string | Yes | The type/category of the plugin to retrieve. |\n| key | string | Yes | The unique name of the plugin to retrieve. |\n\n### Query Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| expandFields | string | No | Comma-separated list of fields to include in the response. |\n\n### Body Parameters\n\nThe request body must include the external repository details to identify where the plugin is located.\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| version | int | Yes | The version of the repository. If not provided, it will default to `0`. |\n| name | string | Yes | The name of the repository (max 155 characters). |\n| url | string | Yes | The URL where the repository is located. |\n| capabilities | object | No | Optional capabilities such as SSL support and connection limits. |\n| credentials | object | No | Optional authentication credentials for accessing the repository. |\n| headers | object | No | Optional HTTP headers to be sent with the request. |\n| timeout | double | No | Optional timeout value in seconds for the repository. |\n\n### Example Body\n\n``` json\n{\n    \"capabilities\": {\n        \"supportsSSL\": true,\n        \"maxConnections\": 10\n    },\n    \"credentials\": {\n        \"username\": \"admin_user\",\n        \"password\": \"Str0ngP@ssw0rd!\"\n    },\n    \"headers\": {\n        \"Accept\": \"application/json\"\n    },\n    \"name\": \"MainAPIService\",\n    \"timeout\": 300.0,\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n}\n\n ```\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully retrieved the plugin manifest.  \n_Content-Type_: `application/json`\n\n**Example Success Response**\n\n``` json\n{\n  \"key\": \"InvokeClick\",\n  \"pluginType\": \"Action\",\n  \"description\": [\n    \"### Purpose\",\n    \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n  ],\n  \"author\": {\n    \"link\": \"https://www.linkedin.com/in/************/\",\n    \"name\": \"*********\"\n  },\n  \"categories\": [\n    \"Ui\",\n    \"Browser\"\n  ],\n  \"protocol\": {\n    \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n  },\n  \"examples\": [\n    {\n      \"description\": [\n        \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n      ],\n      \"rule\": {\n        \"locator\": \"CssSelector\",\n        \"onElement\": \"#ClickButton\",\n        \"pluginName\": \"InvokeClick\"\n      }\n    }\n  ]\n}\n\n ```\n\n**404 Not Found**  \n_Description_: Plugin manifest not found for the provided plugin type, name, or repository.  \n_Content-Type_: `application/problem+json`\n\n**Example Error Response**\n\n``` json\n{\n  \"status\": 404,\n  \"traceId\": \"0HN729FN8M3ET:00000001\",\n  \"errors\": {\n    \"key\": [\n      \"Plugin manifest with key 'InvokeClick1' not found on repository 'http://localhost:9999' for plugin type 'Action'.\"\n    ]\n  },\n  \"request\": {\n    \"name\": \"MainAPIService\",\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n  },\n  \"routeData\": {\n    \"action\": \"GetManifest\",\n    \"controller\": \"Integration\",\n    \"pluginType\": \"Action\",\n    \"key\": \"InvokeClick1\"\n  }\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: POST  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/manifests/type/Action/key/InvokeClick1?expandFields=description,examples`  \n**Headers**:\n\n- Content-Type: `application/json`\n    \n\n**Body**:\n\n``` json\n{\n    \"capabilities\": {\n        \"supportsSSL\": true,\n        \"maxConnections\": 10\n    },\n    \"credentials\": {\n        \"username\": \"admin_user\",\n        \"password\": \"Str0ngP@ssw0rd!\"\n    },\n    \"headers\": {\n        \"Accept\": \"application/json\"\n    },\n    \"name\": \"MainAPIService\",\n    \"timeout\": 300.0,\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n}\n\n ```\n\n### Example cURL\n\n``` bash\ncurl -X POST \"https://api.yourdomain.com/api/v4/g4/integration/manifests/type/Action/key/InvokeClick1?expandFields=description,examples\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"capabilities\": {\n             \"supportsSSL\": true,\n             \"maxConnections\": 10\n           },\n           \"credentials\": {\n             \"username\": \"admin_user\",\n             \"password\": \"Str0ngP@ssw0rd!\"\n           },\n           \"headers\": {\n             \"Accept\": \"application/json\"\n           },\n           \"name\": \"MainAPIService\",\n           \"timeout\": 300.0,\n           \"url\": \"http://localhost:9999\",\n           \"version\": 4\n         }'\n\n ```\n\n### Notes\n\n- The `pluginType`, `key`, and `repository` details are mandatory for the request.\n    \n- The `name`, `url`, and `version` fields in the repository are required. If the `version` is not provided, it will default to `0`.\n    \n- The `expandFields` query parameter allows you to specify which fields to include in the response.\n    \n- Optional fields such as `capabilities`, `credentials`, and `headers` can be used to provide additional configuration for the repository.\n    \n- If the plugin manifest is not found, the 404 error response will provide details on the missing plugin type, key, and repository used in the request."
					},
					"response": []
				},
				{
					"name": "Get Manifests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/manifests",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"manifests"
							]
						},
						"description": "### Endpoint\n\n`GET /api/v4/g4/integration/manifests`\n\n### Description\n\nThis endpoint retrieves all available plugin manifests in the G4 engine integration. Optionally, the response can include specific fields by passing a comma-separated list of field names using the `expandFields` query parameter. The manifest data is returned in JSON format. Additionally, a custom response header `X-Manifest-Count` indicates the total number of manifests retrieved.\n\n### Query Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| expandFields | string | No | Comma-separated list of fields to include in the response. |\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully retrieved the list of plugin manifests.  \n_Content-Type_: `application/json`  \n_Custom Header_: `X-Manifest-Count` — Total number of manifests retrieved.\n\n**Example Success Response**\n\n``` json\n[\n  {\n    \"key\": \"InvokeClick\",\n    \"pluginType\": \"Action\",\n    \"description\": [\n      \"### Purpose\",\n      \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n    ],\n    \"author\": {\n      \"link\": \"https://www.linkedin.com/in/************/\",\n      \"name\": \"*********\"\n    },\n    \"categories\": [\n      \"Ui\",\n      \"Browser\"\n    ],\n    \"protocol\": {\n      \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n    },\n    \"examples\": [\n      {\n        \"description\": [\n          \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n        ],\n        \"rule\": {\n          \"locator\": \"CssSelector\",\n          \"onElement\": \"#ClickButton\",\n          \"pluginName\": \"InvokeClick\"\n        }\n      }\n    ]\n  }\n]\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: GET  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/manifests?expandFields=description,examples`  \n**Headers**:\n\n- Accept: `application/json`\n    \n\n### Example cURL\n\n``` bash\ncurl -X GET \"https://api.yourdomain.com/api/v4/g4/integration/manifests?expandFields=description,examples\" \\\n     -H \"Accept: application/json\"\n\n ```\n\n### Notes\n\n- The `expandFields` query parameter allows you to specify which fields to include in the response.\n    \n- The custom response header `X-Manifest-Count` contains the total number of manifests retrieved.\n    \n- If the `expandFields` query parameter is not provided, all fields will be included in the response."
					},
					"response": []
				},
				{
					"name": "Get Manifests By Repositories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Manifest-Count is greater then 0\", function () {\r",
									"    var header = pm.response.headers.get('X-Manifest-Count');\r",
									"    pm.expect(Number(header)).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"ExternalRepository\",\r\n        \"url\": \"{{ExternalEndpoint}}\",\r\n        \"version\": 4\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/integration/manifests",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"manifests"
							]
						},
						"description": "### Endpoint\n\n`POST /api/v4/g4/integration/manifests`\n\n### Description\n\nThis endpoint retrieves plugin manifests from the specified external repositories. Optionally, the response can include specific fields by passing a comma-separated list of field names using the `expandFields` query parameter. The manifest data is returned in JSON format. A custom response header `X-Manifest-Count` indicates the total number of manifests retrieved.\n\n### Query Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| expandFields | string | No | Comma-separated list of fields to include in the response. |\n\n### Body Parameters\n\nThe request body must include an array of external repository details from where the plugin manifests are retrieved.\n\n| Field | Type | Required | Description |\n| --- | --- | --- | --- |\n| version | int | Yes | The version of the repository. |\n| name | string | Yes | The name of the repository (max 155 characters). |\n| url | string | Yes | The URL where the repository is located. |\n| capabilities | object | No | Optional capabilities such as SSL support and connection limits. |\n| credentials | object | No | Optional authentication credentials for accessing the repository. |\n| headers | object | No | Optional HTTP headers to be sent with the request. |\n| timeout | double | No | Optional timeout value in seconds for the repository. |\n\n#### Example Body\n\n``` json\n[\n  {\n    \"capabilities\": {\n      \"supportsSSL\": true,\n      \"maxConnections\": 10\n    },\n    \"credentials\": {\n      \"username\": \"admin_user\",\n      \"password\": \"Str0ngP@ssw0rd!\"\n    },\n    \"headers\": {\n      \"Accept\": \"application/json\"\n    },\n    \"name\": \"MainAPIService\",\n    \"timeout\": 300.0,\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n  }\n]\n\n ```\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully retrieved the plugin manifests.  \n_Content-Type_: `application/json`  \n_Custom Header_: `X-Manifest-Count` — Total number of manifests retrieved.\n\n**Example Success Response**\n\n``` json\n[\n  {\n    \"key\": \"InvokeClick\",\n    \"pluginType\": \"Action\",\n    \"description\": [\n      \"### Purpose\",\n      \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n    ],\n    \"author\": {\n      \"link\": \"https://www.linkedin.com/in/************/\",\n      \"name\": \"*********\"\n    },\n    \"categories\": [\n      \"Ui\",\n      \"Browser\"\n    ],\n    \"protocol\": {\n      \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n    },\n    \"examples\": [\n      {\n        \"description\": [\n          \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n        ],\n        \"rule\": {\n          \"locator\": \"CssSelector\",\n          \"onElement\": \"#ClickButton\",\n          \"pluginName\": \"InvokeClick\"\n        }\n      }\n    ]\n  }\n]\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: POST  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/manifests?expandFields=description,examples`  \n**Headers**:\n\n- Content-Type: `application/json`\n    \n\n**Body**:\n\n``` json\n[\n  {\n    \"capabilities\": {\n      \"supportsSSL\": true,\n      \"maxConnections\": 10\n    },\n    \"credentials\": {\n      \"username\": \"admin_user\",\n      \"password\": \"Str0ngP@ssw0rd!\"\n    },\n    \"headers\": {\n      \"Accept\": \"application/json\"\n    },\n    \"name\": \"MainAPIService\",\n    \"timeout\": 300.0,\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n  }\n]\n\n ```\n\n### Example cURL\n\n``` bash\ncurl -X POST \"https://api.yourdomain.com/api/v4/g4/integration/manifests?expandFields=description,examples\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[{\n           \"capabilities\": {\n             \"supportsSSL\": true,\n             \"maxConnections\": 10\n           },\n           \"credentials\": {\n             \"username\": \"admin_user\",\n             \"password\": \"Str0ngP@ssw0rd!\"\n           },\n           \"headers\": {\n             \"Accept\": \"application/json\"\n           },\n           \"name\": \"MainAPIService\",\n           \"timeout\": 300.0,\n           \"url\": \"http://localhost:9999\",\n           \"version\": 4\n         }]'\n\n ```\n\n### Notes\n\n- The `expandFields` query parameter allows you to specify which fields to include in the response.\n    \n- The `repository` field in the body is required and should be an array of external repository details.\n    \n- The custom response header `X-Manifest-Count` contains the total number of manifests retrieved.\n    \n- If the `expandFields` query parameter is not provided, all fields will be included in the response."
					},
					"response": []
				},
				{
					"name": "Get Document By Type & Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/documents/type/action/key/InvokeClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"documents",
								"type",
								"action",
								"key",
								"InvokeClick"
							]
						},
						"description": "## Endpoint\n\n`GET /documents/type/{pluginType}/key/{key}`\n\n## Description\n\nThis endpoint retrieves the document associated with the specified plugin type and plugin name from the G4 engine integration. If multiple plugins share the same name within the specified type, the document from the first matching plugin is returned.\n\n## Parameters\n\n| Name | Type | Location | Required | Description |\n| --- | --- | --- | --- | --- |\n| pluginType | string | path | Yes | The type/category of the plugin identifying the document to retrieve. |\n| key | string | path | Yes | The name of the plugin identifying the document to retrieve. |\n\n## Responses\n\n### 200 OK\n\n**Description:** Successfully retrieved the document.\n\n**Content:**\n\n- **Media Type:** `text/markdown`\n    \n- **Body:** The document content in Markdown format.\n    \n\n### 404 Not Found\n\n**Description:** Document not found for the provided plugin type and name.\n\n**Content:**\n\n- **Media Type:** `application/json`\n    \n- **Body:**\n    \n    ``` json\n          {\n              \"status\": 404,\n              \"traceId\": \"0HN729FN8M3ET:00000001\",\n              \"errors\": {\n                  \"key\": [\n                      \"Document with plugin name 'InvokeClick1' not found.\"\n                  ],\n                  \"pluginType\": [\n                      \"Plugin type 'Analytics' does not have a document with the name 'InvokeClick1'.\"\n                  ]\n              },\n              \"request\": \"GET /api/g4/integration/documents/type/Analytics/key/InvokeClick1 HTTP/1.1\",\n              \"routeData\": {}\n          }\n    \n     ```\n    \n\n## Example Request\n\n### HTTP Request\n\n`GET https://api.yourdomain.com/api/g4/integration/documents/type/action/key/InvokeClick`\n\n### cURL\n\n``` bash\ncurl -X GET \"https://api.yourdomain.com/api/g4/integration/documents/type/action/key/InvokeClick\" -H \"Accept: text/markdown\"\n\n ```\n\n## Example Successful Response\n\n### HTTP Response\n\n``` markdown\n# Example Plugin Documentation\n## Overview\nThis plugin provides advanced analytics functionality...\n## Installation\nSteps to install the Example Plugin...\n## Usage\nInstructions on how to use the Example Plugin...\n\n ```\n\n---\n\n## Example Error Response\n\n### HTTP Response\n\n``` json\n{\n    \"status\": 404,\n    \"traceId\": \"0HN729FN8M3ET:00000001\",\n    \"errors\": {\n        \"key\": [\n            \"Document with plugin name 'InvokeClick1' not found.\"\n        ],\n        \"pluginType\": [\n            \"Plugin type 'Analytics' does not have a document with the name 'InvokeClick1'.\"\n        ]\n    },\n    \"request\": \"GET /api/g4/integration/documents/type/Analytics/key/InvokeClick1 HTTP/1.1\",\n    \"routeData\": {}\n}\n\n ```\n\n## Notes\n\n- Ensure that both the `pluginType` and `key` parameters match the exact type and name of the plugin.\n    \n- The response content type for a successful request is `text/markdown`.\n    \n- If the document is not found, a `404 Not Found` status is returned with detailed error messages for both the plugin type and name."
					},
					"response": []
				},
				{
					"name": "Sync Cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/cache/sync",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"cache",
								"sync"
							]
						},
						"description": "### Endpoint\n\n`GET /api/v4/g4/integration/cache/sync`\n\n### Description\n\nThis endpoint triggers the synchronization of the internal plugin cache. It updates the cached data from internal resources and connected libraries within the G4 engine integration. The synchronization ensures that the internal cache is aligned with the latest data from internal sources, excluding external repositories. No content is returned upon successful synchronization.\n\n### Responses\n\n**204 No Content**  \n_Description_: Successfully synchronized the internal plugin cache.  \n_Content-Type_: N/A\n\n### Example Request (using Postman)\n\n**Method**: GET  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/cache/sync`  \n**Headers**: N/A\n\n### Example cURL\n\n``` bash\ncurl -X GET \"https://api.yourdomain.com/api/v4/g4/integration/cache/sync\"\n\n ```\n\n### Notes\n\n- This operation synchronizes the internal cache only, meaning that it excludes external repositories.\n    \n- Upon successful synchronization, a `204 No Content` status is returned without any response body."
					},
					"response": []
				},
				{
					"name": "Sync Cache By Repositories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"ExternalRepository\",\r\n        \"url\": \"{{ExternalEndpoint}}\",\r\n        \"version\": 4\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/integration/cache/sync",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"cache",
								"sync"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Documentation: Templates",
			"item": [
				{
					"name": "Add or Update Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aliases\": [\r\n        \"ConnectDemoApp\"\r\n    ],\r\n    \"author\": {\r\n        \"link\": \"https://www.linkedin.com/in/roei-sabag-247aa18/\",\r\n        \"name\": \"Roei Sabag\"\r\n    },\r\n    \"categories\": [\r\n        \"UserInterface\",\r\n        \"Authentication\"\r\n    ],\r\n    \"source\": \"Template\",\r\n    \"description\": [\r\n        \"### Purpose\",\r\n        \"\",\r\n        \"The `Login` plugin is designed to automate the process of logging into a web application by interacting with the necessary username and password fields and clicking the login button.\",\r\n        \"\",\r\n        \"### Key Features and Functionality\",\r\n        \"\",\r\n        \"| Feature                 | Description                                                                                            |\",\r\n        \"|-------------------------|--------------------------------------------------------------------------------------------------------|\",\r\n        \"| Dynamic Field Detection | Automatically locates the username, password fields, and login button based on provided locators.      |\",\r\n        \"| Secure Input Handling   | Ensures secure handling of sensitive data like passwords during automation workflows.                  |\",\r\n        \"| Error Handling          | Incorporates error handling to manage exceptions, such as incorrect login details or missing elements. |\",\r\n        \"\",\r\n        \"### Usages in RPA\",\r\n        \"\",\r\n        \"| Usage                | Description                                                                                                     |\",\r\n        \"|----------------------|-----------------------------------------------------------------------------------------------------------------|\",\r\n        \"| Web Login Automation | Automates the login process by filling in the username and password fields and clicking the login button.       |\",\r\n        \"| Form Submission      | Automates the submission of login forms in web applications.                                                    |\",\r\n        \"| Error Handling       | Detects and handles scenarios where the login process fails, such as incorrect credentials or missing elements. |\"\r\n    ],\r\n    \"examples\": [\r\n        {\r\n            \"description\": [\r\n                \"Perform a login action by sending the username and password to the respective input fields and clicking the login button.\"\r\n            ],\r\n            \"rule\": {\r\n                \"$type\": \"Action\",\r\n                \"pluginName\": \"Login\",\r\n                \"argument\": \"{{$ --Username:Foo --Password:bar}}\"\r\n            }\r\n        }\r\n    ],\r\n    \"key\": \"Login\",\r\n    \"manifestVersion\": 4,\r\n    \"parameters\": [\r\n        {\r\n            \"description\": [\r\n                \"Specifies the username that should be entered into the username input field during the login process.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Username\",\r\n            \"type\": \"String\"\r\n        },\r\n        {\r\n            \"description\": [\r\n                \"Specifies the password that should be entered into the password input field during the login process.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Password\",\r\n            \"type\": \"String\"\r\n        }\r\n    ],\r\n    \"pluginType\": \"Action\",\r\n    \"properties\": [\r\n        {\r\n            \"description\": [\r\n                \"Specifies the credentials used for logging in. The argument accepts both the username and password in the format '@Username' and '@Password'.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Argument\",\r\n            \"type\": \"String|Expression\"\r\n        }\r\n    ],\r\n    \"rules\": [\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#usernameField\",\r\n            \"pluginName\": \"SendKeys\",\r\n            \"argument\": \"@Username\"\r\n        },\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#passwordField\",\r\n            \"pluginName\": \"SendKeys\",\r\n            \"argument\": \"@Password\"\r\n        },\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#loginButton\",\r\n            \"pluginName\": \"Click\"\r\n        }\r\n    ],\r\n    \"scope\": [\r\n        \"Web\",\r\n        \"MobileWeb\"\r\n    ],\r\n    \"summary\": [\r\n        \"The `Login` plugin automates the process of logging into a web application by filling in username and password fields and clicking the login button.\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						},
						"description": "### Endpoint\n\n`PUT /api/v4/g4/templates/{name}`\n\n### Description\n\nThis endpoint **adds a new template** based on the provided `G4PluginAttribute` manifest. If a template with the specified key already exists, it **overwrites** the existing template and updates the engine cache accordingly. A `204 No Content` response indicates a successful addition or overwrite. If the provided manifest is invalid or missing required fields, a `400 Bad Request` response is returned. Additionally, if the manifest cannot be processed due to a conflict or other issues, a `409 Conflict` response is returned with an appropriate error message.\n\n### Parameters\n\n| **Parameter** | **Location** | **Type**               | **Required** | **Description**                                                                                                               |\n|---------------|--------------|------------------------|--------------|-------------------------------------------------------------------------------------------------------------------------------|\n| `name`        | Path         | `string`               | Yes          | The name of the template to be added or overwritten. Must match the regular expression `\\w+` (alphanumeric characters and underscores only). |\n| `manifest`    | Body         | `G4PluginAttribute`    | Yes          | The manifest of the template to be added. This should include all necessary fields as defined by the `G4PluginAttribute` structure. |\n\n### Responses\n\n**204 No Content**  \n_Description_: The template was successfully added or overwritten, and the engine cache was updated.  \n_Content-Type_: `application/json`\n\n**400 Bad Request**  \n_Description_: Invalid request. The manifest provided is not in the correct format or missing required fields.  \n_Content-Type_: `application/json`\n\n**409 Conflict**  \n_Description_: Invalid manifest. The provided manifest could not be processed.  \n_Content-Type_: `application/json`\n\n### Example Success Responses\n\n**Example for 204 No Content**\n\n_No body content._\n\n### Example Error Responses\n\n**400 Bad Request**\n\n```json\n{\n    \"status\": 400,\n    \"errors\": {\n        \"manifest\": [\n            \"The 'pluginType' field is required.\",\n            \"The 'key' field must be a valid alphanumeric string.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"AddTemplate\",\n        \"controller\": \"Templates\",\n        \"name\": \"InvalidTemplateName\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n```\n\n**409 Conflict**\n\n```json\n{\n    \"status\": 409,\n    \"errors\": {\n        \"InvalidManifest\": [\n            \"Circular reference detected: The plugin 'Login' is referencing itself, directly or indirectly.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"AddTemplate\",\n        \"controller\": \"Templates\",\n        \"name\": \"ConflictingTemplate\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n```\n\n### Example Request (using Postman)\n\n**Method**: PUT  \n**URL**: `https://api.yourdomain.com/api/v4/g4/templates/InvokeClick`  \n**Headers**:\n\n- `Content-Type`: `application/json`\n- `Accept`: `application/json`\n\n**Body** (raw, JSON):\n\n```json\n{\n    \"pluginType\": \"Action\",\n    \"key\": \"InvokeClick\",\n    \"description\": [\n        \"### Purpose\",\n        \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n    ],\n    \"author\": {\n        \"link\": \"https://www.linkedin.com/in/janedoe/\",\n        \"name\": \"Jane Doe\"\n    },\n    \"categories\": [\n        \"Ui\",\n        \"Browser\"\n    ],\n    \"protocol\": {\n        \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n    },\n    \"examples\": [\n        {\n            \"description\": [\n                \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n            ],\n            \"rule\": {\n                \"locator\": \"CssSelector\",\n                \"onElement\": \"#ClickButton\",\n                \"pluginName\": \"InvokeClick\"\n            }\n        }\n    ]\n}\n```\n\n### Example cURL\n\n```bash\ncurl -X PUT \"https://api.yourdomain.com/api/v4/g4/templates/InvokeClick\" \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Accept: application/json\" \\\n     -d '{\n           \"pluginType\": \"Action\",\n           \"key\": \"InvokeClick\",\n           \"description\": [\n               \"### Purpose\",\n               \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n           ],\n           \"author\": {\n               \"link\": \"https://www.linkedin.com/in/janedoe/\",\n               \"name\": \"Jane Doe\"\n           },\n           \"categories\": [\n               \"Ui\",\n               \"Browser\"\n           ],\n           \"protocol\": {\n               \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n           },\n           \"examples\": [\n               {\n                   \"description\": [\n                       \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n                   ],\n                   \"rule\": {\n                       \"locator\": \"CssSelector\",\n                       \"onElement\": \"#ClickButton\",\n                       \"pluginName\": \"InvokeClick\"\n                   }\n               }\n           ]\n         }'\n```\n\n### Notes\n\n- **Template Name (`{name}`)**:\n  - **Description**: The unique name of the template to be added or overwritten.\n  - **Format**: Must match the regular expression `\\w+`, meaning it can only contain alphanumeric characters and underscores.\n  \n- **Manifest (`manifest`)**:\n  - **Description**: The manifest defines the template's metadata and behavior. It must include all required fields as per the `G4PluginAttribute` definition.\n  - **Validation**: Ensure that all mandatory fields are present and correctly formatted to avoid `400 Bad Request` or `409 Conflict` errors.\n  \n- **Response Behavior**:\n  - **204 No Content**: Indicates that the template was successfully added or overwritten. The engine cache is updated to reflect the changes.\n  - **400 Bad Request**: Occurs when the provided manifest is invalid or missing required fields. The response includes detailed error messages specifying the issues.\n  - **409 Conflict**: Occurs when the manifest cannot be processed due to conflicts or other issues. The response includes an error message detailing the problem.\n  \n- **Error Handling**:\n  - **400 Bad Request**:\n    - **Description**: Triggered by invalid input data, such as missing required fields or incorrect data formats in the manifest.\n    - **Structure**:\n      - `status`: HTTP status code (`400`).\n      - `errors`: Detailed validation error messages specifying which fields are incorrect or missing.\n      - `routeData`: Information about where the error occurred, including the action method and controller.\n      - `traceId`: A unique identifier for the request, useful for debugging and tracing purposes.\n  \n  - **409 Conflict**:\n    - **Description**: Triggered by conflicts or issues processing the manifest, such as attempting to overwrite a template with incompatible changes.\n    - **Structure**:\n      - `status`: HTTP status code (`409`).\n      - `errors`: Detailed error messages explaining the nature of the conflict.\n      - `routeData`: Information about where the error occurred, including the action method and controller.\n      - `traceId`: A unique identifier for the request, useful for debugging and tracing purposes.\n  \n- **Content Types**:\n  - **Request**: `application/json`\n  - **Response**:\n    - `204 No Content`: No content.\n    - `400 Bad Request`: `application/json`\n    - `409 Conflict`: `application/json`\n  \n- **Idempotency**:\n  - This operation is **idempotent**. Adding or overwriting the same template multiple times with identical manifests will have the same effect as making it once. Subsequent PUT requests with identical data will consistently return `204 No Content` without causing additional side effects.\n  \n- **Trace ID**:\n  - The `traceId` included in error responses serves as a unique identifier for each request, facilitating easier debugging and log tracing.\n  \n- **Route Data**:\n  - Provides contextual information about where the error occurred, including the action method and controller. This is useful for pinpointing issues during troubleshooting."
					},
					"response": []
				},
				{
					"name": "Get Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/templates/Login",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates",
								"Login"
							]
						},
						"description": "### Endpoint\n\n`GET /api/v4/g4/templates/{key}`\n\n### Description\n\nThis endpoint retrieves the manifest of a template identified by its unique key. If the template exists, its manifest is returned in JSON format with a `200 OK` response. If the template is not found, a `404 Not Found` response is returned with a detailed error message.\n\n### Parameters\n\n| **Parameter** | **Location** | **Type** | **Required** | **Description**                                                                                             |\n|---------------|--------------|----------|--------------|-------------------------------------------------------------------------------------------------------------|\n| `key`         | Path         | `string` | Yes          | The key of the template whose manifest is to be retrieved. Must match the regular expression `\\w+` (alphanumeric characters and underscores only). |\n\n### Responses\n\n**200 OK**  \n_Description_: Template manifest found and returned successfully.  \n_Content-Type_: `application/json`\n\n**404 Not Found**  \n_Description_: Template not found with the specified key.  \n_Content-Type_: `application/json`\n\n### Example Success Responses\n\n**Example for 200 OK**\n\n```json\n{\n    \"pluginType\": \"Action\",\n    \"key\": \"InvokeClick\",\n    \"description\": [\n        \"### Purpose\",\n        \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n    ],\n    \"author\": {\n        \"link\": \"https://www.linkedin.com/in/janedoe/\",\n        \"name\": \"Jane Doe\"\n    },\n    \"categories\": [\n        \"Ui\",\n        \"Browser\"\n    ],\n    \"protocol\": {\n        \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n    },\n    \"examples\": [\n        {\n            \"description\": [\n                \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n            ],\n            \"rule\": {\n                \"locator\": \"CssSelector\",\n                \"onElement\": \"#ClickButton\",\n                \"pluginName\": \"InvokeClick\"\n            }\n        }\n    ]\n}\n```\n\n### Example Error Responses\n\n**404 Not Found**\n\n```json\n{\n    \"status\": 404,\n    \"errors\": {\n        \"key\": [\n            \"The template with key 'NonExistentTemplate' was not found in the cache. Please try re-adding the template or reload the service.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"GetManifest\",\n        \"controller\": \"Templates\",\n        \"key\": \"NonExistentTemplate\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n```\n\n### Example Request (using Postman)\n\n**Method**: GET  \n**URL**: `https://api.yourdomain.com/api/v4/g4/templates/InvokeClick`  \n**Headers**:\n\n- `Accept`: `application/json`\n\n_No body is required for this request._\n\n### Example cURL\n\n```bash\ncurl -X GET \"https://api.yourdomain.com/api/v4/g4/templates/InvokeClick\" \\\n     -H \"Accept: application/json\"\n```\n\n### Notes\n\n- **Template Key (`{key}`)**:\n  - **Description**: The unique key of the template whose manifest is to be retrieved.\n  - **Format**: Must match the regular expression `\\w+`, meaning it can only contain alphanumeric characters and underscores.\n  \n- **Response Behavior**:\n  - **200 OK**: Returned when the template is found. The response includes the manifest details in JSON format.\n  - **404 Not Found**: Returned when the specified template does not exist in the cache. The response includes a detailed error message to aid in troubleshooting.\n  \n- **Error Handling**:\n  - **404 Not Found**:\n    - **Description**: Occurs if the template with the specified key does not exist.\n    - **Structure**:\n      - `status`: HTTP status code (`404`).\n      - `errors`: Detailed error messages specifying the missing template.\n      - `routeData`: Context about where the error occurred, including the action method, controller, and the problematic template key.\n      - `traceId`: A unique identifier for the request, useful for debugging and tracing purposes.\n  \n- **Content Types**:\n  - **Request**: None (since it's a GET request without a body).\n  - **Response**:\n    - `200 OK`: `application/json`\n    - `404 Not Found`: `application/json`\n  \n- **Idempotency**:\n  - This operation is **idempotent**. Retrieving the same template multiple times will consistently return the same result without causing any side effects.\n  \n- **Trace ID**:\n  - The `traceId` included in error responses serves as a unique identifier for each request, facilitating easier debugging and log tracing.\n  \n- **Route Data**:\n  - Provides contextual information about where the error occurred, including the action method, controller, and the specific template key that caused the error."
					},
					"response": []
				},
				{
					"name": "Get Templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						},
						"description": "### Endpoint\n\n`GET /api/v4/g4/templates`\n\n### Description\n\nThis endpoint retrieves **all template manifests** available in the system. The response includes a custom header `X-Manifest-Count` that indicates the total number of manifests returned. This allows clients to quickly ascertain the number of templates without parsing the entire response body.\n\n### Parameters\n\nThis endpoint **does not require any parameters**.\n\n### Responses\n\n**200 OK**  \n_Description_: Manifests retrieved successfully.  \n_Content-Type_: `application/json`  \n_Custom Header_: `X-Manifest-Count` – Indicates the total number of manifests returned.\n\n### Example Success Responses\n\n**Example for 200 OK**\n\n```json\n[\n    {\n        \"pluginType\": \"Action\",\n        \"key\": \"InvokeClick\",\n        \"description\": [\n            \"### Purpose\",\n            \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n        ],\n        \"author\": {\n            \"link\": \"https://www.linkedin.com/in/janedoe/\",\n            \"name\": \"Jane Doe\"\n        },\n        \"categories\": [\n            \"Ui\",\n            \"Browser\"\n        ],\n        \"protocol\": {\n            \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n        },\n        \"examples\": [\n            {\n                \"description\": [\n                    \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n                ],\n                \"rule\": {\n                    \"locator\": \"CssSelector\",\n                    \"onElement\": \"#ClickButton\",\n                    \"pluginName\": \"InvokeClick\"\n                }\n            }\n        ]\n    },\n    {\n        \"pluginType\": \"Validation\",\n        \"key\": \"VerifyText\",\n        \"description\": [\n            \"### Purpose\",\n            \"The `VerifyText` plugin validates the presence of specific text within a web element.\"\n        ],\n        \"author\": {\n            \"link\": \"https://www.linkedin.com/in/johndoe/\",\n            \"name\": \"John Doe\"\n        },\n        \"categories\": [\n            \"Ui\",\n            \"Validation\"\n        ],\n        \"protocol\": {\n            \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-text\"\n        },\n        \"examples\": [\n            {\n                \"description\": [\n                    \"Verify that the text 'Welcome' is present in the web element with the `ID` attribute `WelcomeMessage`.\"\n                ],\n                \"rule\": {\n                    \"locator\": \"CssSelector\",\n                    \"onElement\": \"#WelcomeMessage\",\n                    \"expectedText\": \"Welcome\",\n                    \"pluginName\": \"VerifyText\"\n                }\n            }\n        ]\n    }\n]\n```\n\n_Custom Header Example:_\n\n```\nX-Manifest-Count: 2\n```\n\n### Example Request (using Postman)\n\n**Method**: GET  \n**URL**: `https://api.yourdomain.com/api/v4/g4/templates`  \n**Headers**:\n\n- `Accept`: `application/json`\n\n_No body is required for this request._\n\n### Example cURL\n\n```bash\ncurl -X GET \"https://api.yourdomain.com/api/v4/g4/templates\" \\\n     -H \"Accept: application/json\"\n```\n\n### Notes\n\n- **Custom Header (`X-Manifest-Count`)**:\n  - **Description**: Indicates the total number of template manifests returned in the response.\n  - **Usage**: Clients can use this header to quickly determine the number of available templates without iterating through the entire response body.\n\n- **Response Behavior**:\n  - **200 OK**: Returned when all template manifests are successfully retrieved. The response body contains an array of `G4PluginAttribute` objects representing each template.\n  \n- **Content Types**:\n  - **Request**: None (since it's a GET request without a body).\n  - **Response**:\n    - `200 OK`: `application/json`\n\n- **Idempotency**:\n  - This operation is **idempotent**. Making the same GET request multiple times will consistently return the same set of templates without causing any side effects.\n\n- **Trace ID**:\n  - While not included in successful responses, error responses may contain a `traceId` for debugging and tracing purposes.\n\n- **Route Data**:\n  - Provides contextual information about where the error occurred, including the action method and controller. Not applicable for successful responses."
					},
					"response": []
				},
				{
					"name": "Remove Template",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/templates/Login",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates",
								"Login"
							]
						},
						"description": "### Endpoint\n\n`DELETE /api/v4/g4/templates/{key}`\n\n### Description\n\nThis endpoint **removes a specific template** identified by its unique key from the cache. If the template is successfully removed, a `204 No Content` response is returned, indicating that the operation was successful and there is no additional content to send in the response body. If the template with the specified key does not exist, a `404 Not Found` response is returned with a detailed error message.\n\n### Parameters\n\n| **Parameter** | **Location** | **Type** | **Required** | **Description**                                                                                             |\n|---------------|--------------|----------|--------------|-------------------------------------------------------------------------------------------------------------|\n| `key`         | Path         | `string` | Yes          | The key of the template to be removed. Must match the regular expression `\\w+` (alphanumeric characters and underscores only). |\n\n### Responses\n\n**204 No Content**  \n_Description_: The template was successfully removed from the cache.  \n_Content-Type_: `application/json`\n\n**404 Not Found**  \n_Description_: Template not found with the specified key.  \n_Content-Type_: `application/json`\n\n### Example Success Responses\n\n**Example for 204 No Content**\n\n_No body content._\n\n### Example Error Responses\n\n**404 Not Found**\n\n```json\n{\n    \"status\": 404,\n    \"errors\": {\n        \"key\": [\n            \"The template with key 'NonExistentTemplate' was not found in the cache. Please try re-adding the template or reload the service.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"RemoveTemplate\",\n        \"controller\": \"Templates\",\n        \"key\": \"NonExistentTemplate\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n```\n\n### Example Request (using Postman)\n\n**Method**: DELETE  \n**URL**: `https://api.yourdomain.com/api/v4/g4/templates/InvokeClick`  \n**Headers**:\n\n- `Accept`: `application/json`\n\n_No body is required for this request._\n\n### Example cURL\n\n```bash\ncurl -X DELETE \"https://api.yourdomain.com/api/v4/g4/templates/InvokeClick\" \\\n     -H \"Accept: application/json\"\n```\n\n### Notes\n\n- **Template Key (`{key}`)**:\n  - **Description**: The unique key of the template to be removed.\n  - **Format**: Must match the regular expression `\\w+`, meaning it can only contain alphanumeric characters and underscores.\n\n- **Response Behavior**:\n  - **204 No Content**: Returned when the template is successfully removed from the cache. There is no content in the response body.\n  - **404 Not Found**: Returned when the specified template does not exist in the cache. The response includes a detailed error message to aid in troubleshooting.\n\n- **Error Handling**:\n  - **404 Not Found**:\n    - **Description**: Occurs if the template with the specified key does not exist in the cache.\n    - **Structure**:\n      - `status`: HTTP status code (`404`).\n      - `errors`: Detailed error messages specifying the missing template.\n      - `routeData`: Context about where the error occurred, including the action method, controller, and the problematic template key.\n      - `traceId`: A unique identifier for the request, useful for debugging and tracing purposes.\n\n- **Content Types**:\n  - **Request**: None (since it's a DELETE request without a body).\n  - **Response**:\n    - `204 No Content`: No content.\n    - `404 Not Found`: `application/json`\n\n- **Idempotency**:\n  - This operation is **idempotent**. Deleting the same template multiple times will have the same effect as deleting it once. Subsequent DELETE requests for a non-existent template will consistently return `404 Not Found`.\n\n- **Trace ID**:\n  - The `traceId` included in error responses serves as a unique identifier for each request, facilitating easier debugging and log tracing.\n\n- **Route Data**:\n  - Provides contextual information about where the error occurred, including the action method, controller, and the specific template key that caused the error.\n"
					},
					"response": []
				},
				{
					"name": "Clear Templates",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						},
						"description": "### Endpoint\n\n`DELETE /api/v4/g4/environments/templates`\n\n### Description\n\nThis endpoint **removes all templates** from the cache. Upon successful removal of all templates, a `204 No Content` response is returned, indicating that the operation was successful and there is no additional content to send in the response body.\n\n### Parameters\n\nThis endpoint **does not require any parameters**.\n\n### Responses\n\n**204 No Content**  \n_Description_: All templates were successfully cleared from the cache.  \n_Content-Type_: `application/json`\n\n**500 Internal Server Error** *(Optional)*  \n_Description_: An unexpected error occurred while clearing the templates.  \n_Content-Type_: `application/json`\n\n### Example Success Responses\n\n**Example for 204 No Content**\n\n_No body content._\n\n### Example Error Response\n\n**500 Internal Server Error**\n\n```json\n{\n    \"status\": 500,\n    \"errors\": {\n        \"UnableToClearTemplates\": [\n            \"An unexpected error occurred while clearing the templates. Please try again later.\"\n        ]\n    },\n    \"routeData\": {\n        \"action\": \"ClearTemplates\",\n        \"controller\": \"Environments\"\n    },\n    \"traceId\": \"20241014-094330-0728610\"\n}\n```\n\n### Example Request (using Postman)\n\n**Method**: DELETE  \n**URL**: `https://api.yourdomain.com/api/v4/g4/environments/templates`  \n**Headers**:\n\n- `Accept`: `application/json`\n\n_No body is required for this request._\n\n### Example cURL\n\n```bash\ncurl -X DELETE \"https://api.yourdomain.com/api/v4/g4/environments/templates\" \\\n     -H \"Accept: application/json\"\n```\n\n### Notes\n\n- **No Parameters Required**:\n  - This endpoint does not require any path, query, or body parameters. It operates on the entire collection of templates within the cache.\n  \n- **Response Behavior**:\n  - **204 No Content**: Indicates that all templates were successfully deleted from the cache. There is no content in the response body.\n  - **500 Internal Server Error**: Indicates that an unexpected error occurred during the deletion process. The response includes error details to aid in troubleshooting.\n  \n- **Error Handling**:\n  - **500 Internal Server Error**:\n    - **Description**: Occurs if an unexpected issue arises while attempting to clear the templates, such as database connectivity problems or unforeseen exceptions.\n    - **Structure**:\n      - `status`: HTTP status code (`500`).\n      - `errors`: Detailed error messages explaining the nature of the failure.\n      - `routeData`: Information about where the error occurred, including the action method and controller.\n      - `traceId`: A unique identifier for the request, useful for debugging and tracing purposes.\n  \n- **Content Types**:\n  - **Request**: None (DELETE request without a body).\n  - **Response**:\n    - `204 No Content`: No content.\n    - `500 Internal Server Error`: `application/json`\n  \n- **Idempotency**:\n  - This operation is **idempotent**. Performing the same DELETE request multiple times will have the same effect as making it once. Subsequent DELETE requests after the initial successful deletion will still return `204 No Content`, indicating that the desired state (no templates) has been achieved.\n  \n- **Trace ID**:\n  - The `traceId` included in error responses serves as a unique identifier for each request, facilitating easier debugging and log tracing.\n  \n- **Route Data**:\n  - Provides contextual information about where the error occurred, including the action method and controller. This is useful for pinpointing issues during troubleshooting.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests: One Time Setup",
			"item": [
				{
					"name": "Clear Environments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Templates",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "New System Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SystemParameter1\": \"Foo Bar After Update\",\r\n    \"SystemParameter2\": \"1\",\r\n    \"SystemParameter3\": \"false\",\r\n    \"SystemParameter4\": \"0.5%\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/SystemParameters",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"SystemParameters"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Automation Environment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"AutomationParameter1\": \"Foo Bar After Update\",\r\n    \"AutomationParameter2\": \"1\",\r\n    \"AutomationParameter3\": \"false\",\r\n    \"AutomationParameter4\": \"0.5%\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/AutomationEnvironment",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"AutomationEnvironment"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests: Automation",
			"item": [
				{
					"name": "Invoke Automation with Repositories - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify session parameter 'roman' from external macro is saved\", function () {\r",
									"    var jsonData = Object.values(pm.response.json())[0];\r",
									"    \r",
									"    // Get the first value from the `sessions` dictionary\r",
									"    var firstSession = Object.values(jsonData.sessions)[0];\r",
									"    \r",
									"    // Access session parameters and check the value\r",
									"    pm.expect(firstSession.environment.sessionParameters[\"Roman\"]).to.eql(\"TU1YWElW\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authentication\": {\r\n        \"username\": \"{{ApiUser}}\"\r\n    },\r\n    \"driverParameters\": {\r\n        \"driver\": \"MicrosoftEdgeDriver\",\r\n        \"driverBinaries\": \"{{DriverBinaries}}\",\r\n        \"capabilities\": {\r\n            \"alwaysMatch\": {\r\n                \"browserName\": \"MicrosoftEdge\"\r\n            },\r\n            \"firstMatch\": [\r\n                {}\r\n            ]\r\n        }\r\n    },\r\n    \"settings\": {\r\n        \"pluginsSettings\": {\r\n            \"externalRepositories\": [\r\n                {\r\n                    \"name\": \"ExternalRepository\",\r\n                    \"url\": \"{{ExternalEndpoint}}\",\r\n                    \"version\": 4\r\n                }\r\n            ]\r\n        },\r\n        \"environmentsSettings\": {\r\n            \"returnEnvironment\": true\r\n        }\r\n    },\r\n    \"stages\": [\r\n        {\r\n            \"description\": \"Main stage for invoking integration tests.\",\r\n            \"jobs\": [\r\n                {\r\n                    \"reference\": {\r\n                        \"description\": \"Job responsible for invoking integration a single integration test.\",\r\n                        \"name\": \"Invoking Test G4.IntegrationTests.Plugins.Common.WriteLog.C0001\"\r\n                    },\r\n                    \"rules\": [\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"argument\": \"about:blank\",\r\n                            \"pluginName\": \"GoToUrl\",\r\n                            \"regularExpression\": \"(?s).*\"\r\n                        },\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"pluginName\": \"InvokePythonClick\",\r\n                            \"onElement\": \"//NoElement\"\r\n                        },\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"argument\": \"{{$ --Name:Roman --Value:{{$ConvertToRoman --Number:2024}} --Scope:Session}}\",\r\n                            \"pluginName\": \"RegisterParameter\"\r\n                        },\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"pluginName\": \"CloseBrowser\"\r\n                        }\r\n                    ],\r\n                    \"stopOnError\": false\r\n                }\r\n            ],\r\n            \"name\": \"Integration Tests\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/automation/invoke",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"automation",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke Automation - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authentication\": {\r\n        \"username\": \"{{ApiUser}}\"\r\n    },\r\n    \"driverParameters\": {\r\n        \"driver\": \"MicrosoftEdgeDriver\",\r\n        \"driverBinaries\": \"{{DriverBinaries}}\",\r\n        \"capabilities\": {\r\n            \"alwaysMatch\": {\r\n                \"browserName\": \"MicrosoftEdge\"\r\n            },\r\n            \"firstMatch\": [\r\n                {}\r\n            ]\r\n        }\r\n    },\r\n    \"stages\": [\r\n        {\r\n            \"description\": \"Main stage for invoking integration tests.\",\r\n            \"jobs\": [\r\n                {\r\n                    \"reference\": {\r\n                        \"description\": \"Job responsible for invoking integration a single integration test.\",\r\n                        \"name\": \"Invoking Test G4.IntegrationTests.Plugins.Common.WriteLog.C0001\"\r\n                    },\r\n                    \"rules\": [\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"argument\": \"about:blank\",\r\n                            \"pluginName\": \"GoToUrl\",\r\n                            \"regularExpression\": \"(?s).*\"\r\n                        },\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"argument\": \"The first 8 alphanumeric characters of the GUID are {{$New-Guid --Pattern:^\\\\w{8}}}\",\r\n                            \"pluginName\": \"WriteLog\"\r\n                        },\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"pluginName\": \"CloseBrowser\"\r\n                        }\r\n                    ],\r\n                    \"stopOnError\": false\r\n                }\r\n            ],\r\n            \"name\": \"Integration Tests\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/automation/invoke",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"automation",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke Automation - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertErrorResponse(pm, 400);\r",
									"\r",
									"pm.test(\"Verify 'errors.stages[0].Jobs[0].Rules[1].PluginName' is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[\"Stages[0].Jobs[0].Rules[1].PluginName\"]).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authentication\": {\r\n        \"username\": \"{{ApiUser}}\"\r\n    },\r\n    \"driverParameters\": {\r\n        \"driver\": \"MicrosoftEdgeDriver\",\r\n        \"driverBinaries\": \"{{DriverBinaries}}\",\r\n        \"capabilities\": {\r\n            \"alwaysMatch\": {\r\n                \"browserName\": \"MicrosoftEdge\"\r\n            },\r\n            \"firstMatch\": [\r\n                {}\r\n            ]\r\n        }\r\n    },\r\n    \"stages\": [\r\n        {\r\n            \"description\": \"Main stage for invoking integration tests.\",\r\n            \"jobs\": [\r\n                {\r\n                    \"reference\": {\r\n                        \"description\": \"Job responsible for invoking integration a single integration test.\",\r\n                        \"name\": \"Invoking Test G4.IntegrationTests.Plugins.Common.WriteLog.C0001\"\r\n                    },\r\n                    \"rules\": [\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"argument\": \"about:blank\",\r\n                            \"pluginName\": \"GoToUrl\",\r\n                            \"regularExpression\": \"(?s).*\"\r\n                        },\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"argument\": \"The first 8 alphanumeric characters of the GUID are {{$New-Guid --Pattern:^\\\\w{8}}}\",\r\n                            \"pluginName\": \"\"\r\n                        },\r\n                        {\r\n                            \"$type\": \"Action\",\r\n                            \"pluginName\": \"CloseBrowser\"\r\n                        }\r\n                    ],\r\n                    \"stopOnError\": false\r\n                }\r\n            ],\r\n            \"name\": \"Integration Tests\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/automation/invoke",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"automation",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke Automation - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertErrorResponse(pm, 400);\r",
									"\r",
									"pm.test(\"Verify 'errors.stages[0].Jobs[0].Rules' is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[\"Stages[0].Jobs[0].Rules\"]).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authentication\": {\r\n        \"username\": \"{{ApiUser}}\"\r\n    },\r\n    \"driverParameters\": {\r\n        \"driver\": \"MicrosoftEdgeDriver\",\r\n        \"driverBinaries\": \"{{DriverBinaries}}\",\r\n        \"capabilities\": {\r\n            \"alwaysMatch\": {\r\n                \"browserName\": \"MicrosoftEdge\"\r\n            },\r\n            \"firstMatch\": [\r\n                {}\r\n            ]\r\n        }\r\n    },\r\n    \"stages\": [\r\n        {\r\n            \"description\": \"Main stage for invoking integration tests.\",\r\n            \"jobs\": [\r\n                {\r\n                    \"reference\": {\r\n                        \"description\": \"Job responsible for invoking integration a single integration test.\",\r\n                        \"name\": \"Invoking Test G4.IntegrationTests.Plugins.Common.WriteLog.C0001\"\r\n                    },\r\n                    \"rules\": [\r\n\r\n                    ],\r\n                    \"stopOnError\": false\r\n                }\r\n            ],\r\n            \"name\": \"Integration Tests\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/automation/invoke",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"automation",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke Automation - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertErrorResponse(pm, 400);\r",
									"\r",
									"pm.test(\"Verify 'errors.stages[0].Jobs' is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[\"Stages[0].Jobs\"]).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authentication\": {\r\n        \"username\": \"{{ApiUser}}\"\r\n    },\r\n    \"driverParameters\": {\r\n        \"driver\": \"MicrosoftEdgeDriver\",\r\n        \"driverBinaries\": \"{{DriverBinaries}}\",\r\n        \"capabilities\": {\r\n            \"alwaysMatch\": {\r\n                \"browserName\": \"MicrosoftEdge\"\r\n            },\r\n            \"firstMatch\": [\r\n                {}\r\n            ]\r\n        }\r\n    },\r\n    \"stages\": [\r\n        {\r\n            \"description\": \"Main stage for invoking integration tests.\",\r\n            \"name\": \"Integration Tests\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/automation/invoke",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"automation",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke Automation - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertErrorResponse(pm, 400);\r",
									"\r",
									"pm.test(\"Verify 'errors.stages' is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[\"Stages\"]).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authentication\": {\r\n        \"username\": \"{{ApiUser}}\"\r\n    },\r\n    \"driverParameters\": {\r\n        \"driver\": \"MicrosoftEdgeDriver\",\r\n        \"driverBinaries\": \"{{DriverBinaries}}\",\r\n        \"capabilities\": {\r\n            \"alwaysMatch\": {\r\n                \"browserName\": \"MicrosoftEdge\"\r\n            },\r\n            \"firstMatch\": [\r\n                {}\r\n            ]\r\n        }\r\n    },\r\n    \"stages\": [\r\n\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/automation/invoke",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"automation",
								"invoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoke Automation - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertErrorResponse(pm, 400);\r",
									"\r",
									"pm.test(\"Verify 'errors.stages' is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[\"Stages\"]).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authentication\": {\r\n        \"username\": \"{{ApiUser}}\"\r\n    },\r\n    \"driverParameters\": {\r\n        \"driver\": \"MicrosoftEdgeDriver\",\r\n        \"driverBinaries\": \"{{DriverBinaries}}\",\r\n        \"capabilities\": {\r\n            \"alwaysMatch\": {\r\n                \"browserName\": \"MicrosoftEdge\"\r\n            },\r\n            \"firstMatch\": [\r\n                {}\r\n            ]\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/automation/invoke",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"automation",
								"invoke"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests: Environment",
			"item": [
				{
					"name": "Get Environment - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/environments/AutomationEnvironment",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"AutomationEnvironment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Environment  - No Encodeing - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/environments/AutomationEnvironment?decode=true",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"AutomationEnvironment"
							],
							"query": [
								{
									"key": "decode",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Environment - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/environments/NoEnvironment",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"NoEnvironment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Environments - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/environments",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Parameter with Environment - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 or 200\", ()=> {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/AutomationEnvironment/parameter/AutomationParameter2",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"AutomationEnvironment",
								"parameter",
								"AutomationParameter2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Parameter with Environment - 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/AutomationEnvironment/parameter/AutomationParameter1",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"AutomationEnvironment",
								"parameter",
								"AutomationParameter1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Parameter with Environment - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/NoEnvironment/parameter/AutomationParameter1",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"NoEnvironment",
								"parameter",
								"AutomationParameter1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Parameter with Environment - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/AutomationEnvironment/parameter/NoParameter",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"AutomationEnvironment",
								"parameter",
								"NoParameter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Environment - 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Parameter1\": \"Foo Bar After Update\",\r\n    \"Parameter2\": \"1\",\r\n    \"Parameter3\": \"false\",\r\n    \"Parameter4\": \"0.5%\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/AutomationEnvironment",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"AutomationEnvironment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Environment - 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Parameter1\": \"Foo Bar After Update\",\r\n    \"Parameter2\": \"1\",\r\n    \"Parameter3\": \"false\",\r\n    \"Parameter4\": \"0.5%\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/NewAutomationEnvironment",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"NewAutomationEnvironment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Parameter - No Encoding - 200 | 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", ()=> {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "ParameterValue",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/parameter/SystemParameter1?encode=false",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"parameter",
								"SystemParameter1"
							],
							"query": [
								{
									"key": "encode",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Parameter with Environment - 200 | 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", ()=> {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "ParameterValue",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/environments/AutomationEnvironment/parameter/SystemParameter1",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"environments",
								"AutomationEnvironment",
								"parameter",
								"SystemParameter1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests: Integration",
			"item": [
				{
					"name": "Get Cache - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Field count is greate than 0\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const fieldCount = Object.keys(jsonData).length;\r",
									"\r",
									"    pm.expect(fieldCount).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/cache",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"cache"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document By Key - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is text/markdown\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/markdown\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/documents/key/InvokeClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"documents",
								"key",
								"InvokeClick"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document By Key - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertErrorResponse(pm, 404);\r",
									"\r",
									"pm.test(\"Verify 'errors.key' is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.key).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/documents/key/none",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"documents",
								"key",
								"none"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document By Key & Repository - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertExternalRepositoryError(pm);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/integration/documents/key/InvokePythonClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"documents",
								"key",
								"InvokePythonClick"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document By Type & Key - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is text/markdown\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/markdown\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/documents/type/action/key/InvokeClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"documents",
								"type",
								"action",
								"key",
								"InvokeClick"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document By Type & Key - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertErrorResponse(pm, 404);\r",
									"\r",
									"pm.test(\"Verify 'errors.key' is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.key).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'errors.pluginType' is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.pluginType).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/documents/type/action/key/none",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"documents",
								"type",
								"action",
								"key",
								"none"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document By Type, Key & Repository - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertExternalRepositoryError(pm);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/integration/documents/type/action/key/InvokePythonClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"documents",
								"type",
								"action",
								"key",
								"InvokePythonClick"
							]
						},
						"description": "Retrieve Plugin Documentation by Type, Key, and Repository\n\n### Endpoint\n\n`POST /api/v4/g4/integration/documents/type/{pluginType}/key/{key}`\n\n### Description\n\nThis endpoint retrieves the Markdown documentation for a specific plugin based on its type, name, and external repository information. The plugin is identified by the `pluginType` and `key` path parameters, and the documentation is fetched from the specified external repository provided in the request body. If the documentation is found, it is returned in Markdown format. If not found, a 404 response with detailed error information is returned.\n\n### Path Parameters\n\n| Name | Type | Location | Required | Description |\n| --- | --- | --- | --- | --- |\n| `pluginType` | string | path | Yes | The type or category of the plugin to retrieve documentation for. |\n| `key` | string | path | Yes | The name of the plugin identifying the documentation to retrieve. |\n\n### Body Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| version | int | Yes | The version of the repository. |\n| name | string | Yes | The name of the repository (max 155 characters). |\n| url | string | Yes | The URL where the repository is located. |\n| capabilities | object | No | Optional capabilities such as SSL support and connection limits. |\n| credentials | object | No | Optional authentication credentials for accessing the repository. |\n| headers | object | No | Optional HTTP headers to be sent with the request. |\n| timeout | double | No | Optional timeout value in seconds for the repository. |\n\n### Responses\n\n- **200 OK**\n    \n    - **Description**: Successfully retrieved the plugin Markdown documentation.\n        \n    - **Content**:\n        \n        - **Media Type**: `text/markdown`\n            \n        - **Body**: The Markdown content of the plugin documentation.\n            \n- **404 Not Found**\n    \n    - **Description**: Plugin Markdown documentation not found for the provided `pluginType`, `key`, or repository.\n        \n    - **Content**:\n        \n        - **Media Type**: `application/json`\n            \n        - **Body**:\n            \n            ``` json\n                      {\n                        \"status\": 404,\n                        \"traceId\": \"0HN729FN8M3ET:00000001\",\n                        \"errors\": {\n                            \"key\": [\n                                \"Plugin Markdown documentation with plugin name 'ExamplePlugin' not found on repository 'https://repository.example.com' for plugin type 'External'.\"\n                            ]\n                        },\n                        \"request\": \"POST /api/v4/g4/integration/documents/type/External/key/ExamplePlugin HTTP/1.1\",\n                        \"routeData\": {}\n                      }\n            \n             ```\n            \n\n### Example Request\n\n``` http\nPOST https://api.yourdomain.com/api/v4/g4/integration/documents/type/External/key/ExamplePlugin\nContent-Type: application/json\n{\n    \"url\": \"https://repository.example.com\",\n    \"credentials\": {\n        \"username\": \"user\",\n        \"password\": \"pass\"\n    }\n}\n\n ```\n\n### Example Successful Response\n\n``` http\nHTTP/1.1 200 OK\nContent-Type: text/markdown\n# Example Plugin Documentation\n## Overview\nThis plugin provides advanced functionality for...\n## Installation\nSteps to install the Example Plugin...\n## Usage\nInstructions on how to use the Example Plugin...\n\n ```\n\n### Example Error Response\n\n``` http\nHTTP/1.1 404 Not Found\nContent-Type: application/json\n{\n    \"status\": 404,\n    \"traceId\": \"0HN729FN8M3ET:00000001\",\n    \"errors\": {\n        \"key\": [\n            \"Plugin Markdown documentation with plugin name 'ExamplePlugin' not found on repository 'https://repository.example.com' for plugin type 'External'.\"\n        ]\n    },\n    \"request\": \"POST /api/v4/g4/integration/documents/type/External/key/ExamplePlugin HTTP/1.1\",\n    \"routeData\": {}\n}\n\n ```\n\n### Notes\n\n- Ensure the `pluginType`, `key`, and repository details are correct.\n    \n- The request body must include the repository information in the `G4ExternalRepositoryModel` format.\n    \n- The successful response will return Markdown content. If not found, a 404 error is returned with details on the missing plugin and repository."
					},
					"response": []
				},
				{
					"name": "Get Manifest By Key - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response key is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.key).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Examples array contains at least one item\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.examples.length).to.be.greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/manifests/key/InvokeClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"manifests",
								"key",
								"InvokeClick"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get manifest By Key - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertErrorResponse(pm, 404);\r",
									"\r",
									"pm.test(\"Verify 'errors.key' is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.key).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/manifests/key/none",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"manifests",
								"key",
								"none"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Manifest By Key & Repository - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertExternalRepositoryError(pm);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/integration/manifests/key/InvokePythonClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"manifests",
								"key",
								"InvokePythonClick"
							]
						},
						"description": "Retrieve Plugin Manifest by Key and Repository\n\n### Endpoint\n\n`POST /api/v4/g4/integration/manifests/key/{key}`\n\n### Description\n\nThis endpoint retrieves the plugin manifest identified by the plugin name `key` and the external repository information provided in the request body. The manifest data is returned in JSON format if found. If the manifest is not found, a 404 error response is returned with detailed error information.\n\n### Path Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| key | string | Yes | The unique name of the plugin to retrieve. |\n\n### Body Parameters\n\n| Name | Type | Required | Description |\n| --- | --- | --- | --- |\n| version | int | Yes | The version of the repository. |\n| name | string | Yes | The name of the repository (max 155 characters). |\n| url | string | Yes | The URL where the repository is located. |\n| capabilities | object | No | Optional capabilities such as SSL support and connection limits. |\n| credentials | object | No | Optional authentication credentials for accessing the repository. |\n| headers | object | No | Optional HTTP headers to be sent with the request. |\n| timeout | double | No | Optional timeout value in seconds for the repository. |\n\n**Example Body:**\n\n``` json\n{\n    \"capabilities\": {\n        \"supportsSSL\": true,\n        \"maxConnections\": 10\n    },\n    \"credentials\": {\n        \"username\": \"admin_user\",\n        \"password\": \"Str0ngP@ssw0rd!\"\n    },\n    \"headers\": {\n        \"Accept\": \"application/json\"\n    },\n    \"name\": \"MainAPIService\",\n    \"timeout\": 300.0,\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n}\n\n ```\n\n### Responses\n\n**200 OK**  \n_Description_: Successfully retrieved the plugin manifest.  \n_Content-Type_: `application/json`\n\n**Example Success Response**\n\n``` json\n{\n  \"key\": \"InvokeClick\",\n  \"pluginType\": \"Action\",\n  \"description\": [\n    \"### Purpose\",\n    \"The primary purpose of the `InvokeClick` plugin is to perform click actions on specified web elements.\"\n  ],\n  \"author\": {\n    \"link\": \"https://www.linkedin.com/in/************/\",\n    \"name\": \"*********\"\n  },\n  \"categories\": [\n    \"Ui\",\n    \"Browser\"\n  ],\n  \"protocol\": {\n    \"apiDocumentation\": \"https://www.w3.org/TR/webdriver/#element-click\"\n  },\n  \"examples\": [\n    {\n      \"description\": [\n        \"Perform a `Click` action on a web element with the `ID` attribute `ClickButton`.\"\n      ],\n      \"rule\": {\n        \"locator\": \"CssSelector\",\n        \"onElement\": \"#ClickButton\",\n        \"pluginName\": \"InvokeClick\"\n      }\n    }\n  ]\n}\n\n ```\n\n**404 Not Found**  \n_Description_: Plugin manifest not found for the provided plugin name and repository.  \n_Content-Type_: `application/problem+json`\n\n**Example Error Response**\n\n``` json\n{\n  \"status\": 404,\n  \"traceId\": \"0HN729FN8M3ET:00000001\",\n  \"errors\": {\n    \"key\": [\n      \"Plugin manifest with key 'InvokeClick1' not found on repository 'http://localhost:9999'.\"\n    ]\n  },\n  \"request\": {\n    \"name\": \"MainAPIService\",\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n  },\n  \"routeData\": {\n    \"action\": \"GetManifest\",\n    \"controller\": \"Integration\",\n    \"key\": \"InvokeClick1\"\n  }\n}\n\n ```\n\n### Example Request (using Postman)\n\n**Method**: POST  \n**URL**: `https://api.yourdomain.com/api/v4/g4/integration/manifests/key/InvokeClick1`  \n**Headers**:\n\n- Content-Type: `application/json`\n    \n\n**Body**:\n\n``` json\n{\n    \"capabilities\": {\n        \"supportsSSL\": true,\n        \"maxConnections\": 10\n    },\n    \"credentials\": {\n        \"username\": \"admin_user\",\n        \"password\": \"Str0ngP@ssw0rd!\"\n    },\n    \"headers\": {\n        \"Accept\": \"application/json\"\n    },\n    \"name\": \"MainAPIService\",\n    \"timeout\": 300.0,\n    \"url\": \"http://localhost:9999\",\n    \"version\": 4\n}\n\n ```\n\n### Example cURL\n\n``` bash\ncurl -X POST \"https://api.yourdomain.com/api/v4/g4/integration/manifests/key/InvokeClick1\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"capabilities\": {\n             \"supportsSSL\": true,\n             \"maxConnections\": 10\n           },\n           \"credentials\": {\n             \"username\": \"admin_user\",\n             \"password\": \"Str0ngP@ssw0rd!\"\n           },\n           \"headers\": {\n             \"Accept\": \"application/json\"\n           },\n           \"name\": \"MainAPIService\",\n           \"timeout\": 300.0,\n           \"url\": \"http://localhost:9999\",\n           \"version\": 4\n         }'\n\n ```\n\n### Notes\n\n- The `name`, `url`, and `version` are mandatory fields in the request body.\n    \n- Optional fields such as `capabilities`, `credentials`, and `headers` can be used to provide additional configuration for the repository.\n    \n- If the plugin manifest is not found, the 404 error will provide details of the repository and the plugin key that was requested."
					},
					"response": []
				},
				{
					"name": "Get Manifest By Type & Key - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/manifests/type/action/key/InvokeClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"manifests",
								"type",
								"action",
								"key",
								"InvokeClick"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Manifest By Type, Key & Repository - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertExternalRepositoryError(pm);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/integration/manifests/type/action/key/InvokePythonClick",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"manifests",
								"type",
								"action",
								"key",
								"InvokePythonClick"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Manifests - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Manifest-Count is greater then 0\", function () {\r",
									"    var header = pm.response.headers.get('X-Manifest-Count');\r",
									"    pm.expect(Number(header)).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/manifests",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"manifests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Manifest By Type & Key - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"TestUtilities.assertErrorResponse(pm, 404);\r",
									"\r",
									"pm.test(\"Verify 'errors.key' is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.key).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'errors.pluginType' is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.pluginType).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/documents/type/action/key/none",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"documents",
								"type",
								"action",
								"key",
								"none"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sync Cache - 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/integration/cache/sync",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"integration",
								"cache",
								"sync"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests: Templates",
			"item": [
				{
					"name": "Add or Update Template - 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aliases\": [\r\n        \"ConnectDemoApp\"\r\n    ],\r\n    \"author\": {\r\n        \"link\": \"https://www.linkedin.com/in/roei-sabag-247aa18/\",\r\n        \"name\": \"Roei Sabag\"\r\n    },\r\n    \"categories\": [\r\n        \"UserInterface\",\r\n        \"Authentication\"\r\n    ],\r\n    \"source\": \"Template\",\r\n    \"description\": [\r\n        \"### Purpose\",\r\n        \"\",\r\n        \"The `Login` plugin is designed to automate the process of logging into a web application by interacting with the necessary username and password fields and clicking the login button.\",\r\n        \"\",\r\n        \"### Key Features and Functionality\",\r\n        \"\",\r\n        \"| Feature                 | Description                                                                                            |\",\r\n        \"|-------------------------|--------------------------------------------------------------------------------------------------------|\",\r\n        \"| Dynamic Field Detection | Automatically locates the username, password fields, and login button based on provided locators.      |\",\r\n        \"| Secure Input Handling   | Ensures secure handling of sensitive data like passwords during automation workflows.                  |\",\r\n        \"| Error Handling          | Incorporates error handling to manage exceptions, such as incorrect login details or missing elements. |\",\r\n        \"\",\r\n        \"### Usages in RPA\",\r\n        \"\",\r\n        \"| Usage                | Description                                                                                                     |\",\r\n        \"|----------------------|-----------------------------------------------------------------------------------------------------------------|\",\r\n        \"| Web Login Automation | Automates the login process by filling in the username and password fields and clicking the login button.       |\",\r\n        \"| Form Submission      | Automates the submission of login forms in web applications.                                                    |\",\r\n        \"| Error Handling       | Detects and handles scenarios where the login process fails, such as incorrect credentials or missing elements. |\"\r\n    ],\r\n    \"examples\": [\r\n        {\r\n            \"description\": [\r\n                \"Perform a login action by sending the username and password to the respective input fields and clicking the login button.\"\r\n            ],\r\n            \"rule\": {\r\n                \"$type\": \"Action\",\r\n                \"pluginName\": \"Login\",\r\n                \"argument\": \"{{$ --Username:Foo --Password:bar}}\"\r\n            }\r\n        }\r\n    ],\r\n    \"key\": \"Login\",\r\n    \"manifestVersion\": 4,\r\n    \"parameters\": [\r\n        {\r\n            \"description\": [\r\n                \"Specifies the username that should be entered into the username input field during the login process.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Username\",\r\n            \"type\": \"String\"\r\n        },\r\n        {\r\n            \"description\": [\r\n                \"Specifies the password that should be entered into the password input field during the login process.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Password\",\r\n            \"type\": \"String\"\r\n        }\r\n    ],\r\n    \"pluginType\": \"Action\",\r\n    \"properties\": [\r\n        {\r\n            \"description\": [\r\n                \"Specifies the credentials used for logging in. The argument accepts both the username and password in the format '@Username' and '@Password'.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Argument\",\r\n            \"type\": \"String|Expression\"\r\n        }\r\n    ],\r\n    \"rules\": [\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#usernameField\",\r\n            \"pluginName\": \"SendKeys\",\r\n            \"argument\": \"@Username\"\r\n        },\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#passwordField\",\r\n            \"pluginName\": \"SendKeys\",\r\n            \"argument\": \"@Password\"\r\n        },\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#loginButton\",\r\n            \"pluginName\": \"Click\"\r\n        }\r\n    ],\r\n    \"scope\": [\r\n        \"Web\",\r\n        \"MobileWeb\"\r\n    ],\r\n    \"summary\": [\r\n        \"The `Login` plugin automates the process of logging into a web application by filling in username and password fields and clicking the login button.\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add or Update Template - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add or Update Template - 409",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aliases\": [\r\n        \"ConnectDemoApp\"\r\n    ],\r\n    \"author\": {\r\n        \"link\": \"https://www.linkedin.com/in/roei-sabag-247aa18/\",\r\n        \"name\": \"Roei Sabag\"\r\n    },\r\n    \"categories\": [\r\n        \"UserInterface\",\r\n        \"Authentication\"\r\n    ],\r\n    \"source\": \"Template\",\r\n    \"description\": [\r\n        \"### Purpose\",\r\n        \"\",\r\n        \"The `Login` plugin is designed to automate the process of logging into a web application by interacting with the necessary username and password fields and clicking the login button.\",\r\n        \"\",\r\n        \"### Key Features and Functionality\",\r\n        \"\",\r\n        \"| Feature                 | Description                                                                                            |\",\r\n        \"|-------------------------|--------------------------------------------------------------------------------------------------------|\",\r\n        \"| Dynamic Field Detection | Automatically locates the username, password fields, and login button based on provided locators.      |\",\r\n        \"| Secure Input Handling   | Ensures secure handling of sensitive data like passwords during automation workflows.                  |\",\r\n        \"| Error Handling          | Incorporates error handling to manage exceptions, such as incorrect login details or missing elements. |\",\r\n        \"\",\r\n        \"### Usages in RPA\",\r\n        \"\",\r\n        \"| Usage                | Description                                                                                                     |\",\r\n        \"|----------------------|-----------------------------------------------------------------------------------------------------------------|\",\r\n        \"| Web Login Automation | Automates the login process by filling in the username and password fields and clicking the login button.       |\",\r\n        \"| Form Submission      | Automates the submission of login forms in web applications.                                                    |\",\r\n        \"| Error Handling       | Detects and handles scenarios where the login process fails, such as incorrect credentials or missing elements. |\"\r\n    ],\r\n    \"examples\": [\r\n        {\r\n            \"description\": [\r\n                \"Perform a login action by sending the username and password to the respective input fields and clicking the login button.\"\r\n            ],\r\n            \"rule\": {\r\n                \"$type\": \"Action\",\r\n                \"pluginName\": \"Login\",\r\n                \"argument\": \"{{$ --Username:Foo --Password:bar}}\"\r\n            }\r\n        }\r\n    ],\r\n    \"key\": \"Login\",\r\n    \"manifestVersion\": 4,\r\n    \"parameters\": [\r\n        {\r\n            \"description\": [\r\n                \"Specifies the username that should be entered into the username input field during the login process.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Username\",\r\n            \"type\": \"String\"\r\n        },\r\n        {\r\n            \"description\": [\r\n                \"Specifies the password that should be entered into the password input field during the login process.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Password\",\r\n            \"type\": \"String\"\r\n        }\r\n    ],\r\n    \"pluginType\": \"Action\",\r\n    \"properties\": [\r\n        {\r\n            \"description\": [\r\n                \"Specifies the credentials used for logging in. The argument accepts both the username and password in the format '@Username' and '@Password'.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Argument\",\r\n            \"type\": \"String|Expression\"\r\n        }\r\n    ],\r\n    \"rules\": [\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#usernameField\",\r\n            \"pluginName\": \"SendKeys\",\r\n            \"argument\": \"@Username\"\r\n        },\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#passwordField\",\r\n            \"pluginName\": \"SendKeys\",\r\n            \"argument\": \"@Password\"\r\n        },\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#loginButton\",\r\n            \"pluginName\": \"Login\"\r\n        }\r\n    ],\r\n    \"scope\": [\r\n        \"Web\",\r\n        \"MobileWeb\"\r\n    ],\r\n    \"summary\": [\r\n        \"The `Login` plugin automates the process of logging into a web application by filling in username and password fields and clicking the login button.\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add or Update Template - 409 - Sub Actions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aliases\": [\r\n        \"ConnectDemoApp\"\r\n    ],\r\n    \"author\": {\r\n        \"link\": \"https://www.linkedin.com/in/roei-sabag-247aa18/\",\r\n        \"name\": \"Roei Sabag\"\r\n    },\r\n    \"categories\": [\r\n        \"UserInterface\",\r\n        \"Authentication\"\r\n    ],\r\n    \"source\": \"Template\",\r\n    \"description\": [\r\n        \"### Purpose\",\r\n        \"\",\r\n        \"The `Login` plugin is designed to automate the process of logging into a web application by interacting with the necessary username and password fields and clicking the login button.\",\r\n        \"\",\r\n        \"### Key Features and Functionality\",\r\n        \"\",\r\n        \"| Feature                 | Description                                                                                            |\",\r\n        \"|-------------------------|--------------------------------------------------------------------------------------------------------|\",\r\n        \"| Dynamic Field Detection | Automatically locates the username, password fields, and login button based on provided locators.      |\",\r\n        \"| Secure Input Handling   | Ensures secure handling of sensitive data like passwords during automation workflows.                  |\",\r\n        \"| Error Handling          | Incorporates error handling to manage exceptions, such as incorrect login details or missing elements. |\",\r\n        \"\",\r\n        \"### Usages in RPA\",\r\n        \"\",\r\n        \"| Usage                | Description                                                                                                     |\",\r\n        \"|----------------------|-----------------------------------------------------------------------------------------------------------------|\",\r\n        \"| Web Login Automation | Automates the login process by filling in the username and password fields and clicking the login button.       |\",\r\n        \"| Form Submission      | Automates the submission of login forms in web applications.                                                    |\",\r\n        \"| Error Handling       | Detects and handles scenarios where the login process fails, such as incorrect credentials or missing elements. |\"\r\n    ],\r\n    \"examples\": [\r\n        {\r\n            \"description\": [\r\n                \"Perform a login action by sending the username and password to the respective input fields and clicking the login button.\"\r\n            ],\r\n            \"rule\": {\r\n                \"$type\": \"Action\",\r\n                \"pluginName\": \"Login\",\r\n                \"argument\": \"{{$ --Username:Foo --Password:bar}}\"\r\n            }\r\n        }\r\n    ],\r\n    \"key\": \"Login\",\r\n    \"manifestVersion\": 4,\r\n    \"parameters\": [\r\n        {\r\n            \"description\": [\r\n                \"Specifies the username that should be entered into the username input field during the login process.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Username\",\r\n            \"type\": \"String\"\r\n        },\r\n        {\r\n            \"description\": [\r\n                \"Specifies the password that should be entered into the password input field during the login process.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Password\",\r\n            \"type\": \"String\"\r\n        }\r\n    ],\r\n    \"pluginType\": \"Action\",\r\n    \"properties\": [\r\n        {\r\n            \"description\": [\r\n                \"Specifies the credentials used for logging in. The argument accepts both the username and password in the format '@Username' and '@Password'.\"\r\n            ],\r\n            \"mandatory\": true,\r\n            \"name\": \"Argument\",\r\n            \"type\": \"String|Expression\"\r\n        }\r\n    ],\r\n    \"rules\": [\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#usernameField\",\r\n            \"pluginName\": \"SendKeys\",\r\n            \"argument\": \"@Username\"\r\n        },\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"locator\": \"CssSelector\",\r\n            \"onElement\": \"#passwordField\",\r\n            \"pluginName\": \"SendKeys\",\r\n            \"argument\": \"@Password\"\r\n        },\r\n        {\r\n            \"$type\": \"Action\",\r\n            \"pluginName\": \"NoAction\",\r\n            \"rules\": [\r\n                {\r\n                    \"$type\": \"Action\",\r\n                    \"locator\": \"CssSelector\",\r\n                    \"onElement\": \"#loginButton\",\r\n                    \"pluginName\": \"Login\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"scope\": [\r\n        \"Web\",\r\n        \"MobileWeb\"\r\n    ],\r\n    \"summary\": [\r\n        \"The `Login` plugin automates the process of logging into a web application by filling in username and password fields and clicking the login button.\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Template - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/templates/Login",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates",
								"Login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Template - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Endpoint}}/templates/NoTemplate",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates",
								"NoTemplate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Templates - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Manifest-Count is greater then 0\", function () {\r",
									"    var header = pm.response.headers.get('X-Manifest-Count');\r",
									"    pm.expect(Number(header)).to.be.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Template - 204",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/templates/TestTemplate",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates",
								"TestTemplate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Template - 404",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/templates/TestTemplate",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates",
								"TestTemplate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear Templates - 204",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Templates - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"X-Manifest-Count equals 0\", function () {\r",
									"    var header = pm.response.headers.get('X-Manifest-Count');\r",
									"    pm.expect(Number(header)).equal(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Endpoint}}/templates",
							"host": [
								"{{Endpoint}}"
							],
							"path": [
								"templates"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"/**\r",
					" * Utility object containing various test functions for Postman collections.\r",
					" */\r",
					"TestUtilities = {};\r",
					"\r",
					"/**\r",
					" * Asserts that the response from an external repository returns an error\r",
					" * with the expected status code and structure.\r",
					" *\r",
					" * @param {Postman} pm - The Postman sandbox object, providing access to request and response data.\r",
					" */\r",
					"TestUtilities.assertExternalRepositoryError = (pm) => {\r",
					"    pm.test('Status code is 400', function () {\r",
					"        pm.response.to.have.status(400);\r",
					"    });\r",
					"\r",
					"    pm.test(\"Content-Type is application/problem+json\", function () {\r",
					"        const contentType = pm.response.headers.get(\"Content-Type\");\r",
					"        pm.expect(contentType).to.include(\"application/problem+json\");\r",
					"    });\r",
					"\r",
					"    pm.test(\"Response body is not empty\", function () {\r",
					"        const responseBody = pm.response.text();\r",
					"        pm.expect(responseBody).to.not.be.empty;\r",
					"    });\r",
					"\r",
					"    pm.test(\"Verify 'errors.Url' is not empty\", function () {\r",
					"        const jsonData = pm.response.json();\r",
					"        pm.expect(jsonData.errors.Url).to.not.be.empty;\r",
					"    });\r",
					"\r",
					"    pm.test(\"Verify 'errors.Name' is not empty\", function () {\r",
					"        const jsonData = pm.response.json();\r",
					"        pm.expect(jsonData.errors.Name).to.not.be.empty;\r",
					"    });\r",
					"};\r",
					"\r",
					"/**\r",
					" * Asserts that the response contains the expected error status code, content type, and non-empty body.\r",
					" *\r",
					" * @param {Postman} pm - The Postman sandbox object, providing access to request and response data.\r",
					" * @param {number} errorCode - The expected HTTP status code (e.g., 400 for Bad Request, 404 for Not Found).\r",
					" */\r",
					"TestUtilities.assertErrorResponse = (pm, errorCode) => {\r",
					"    pm.test(`Status code is ${errorCode}`, function () {\r",
					"        pm.response.to.have.status(errorCode);\r",
					"    });\r",
					"\r",
					"    pm.test(\"Content-Type is application/problem+json\", function () {\r",
					"        const contentType = pm.response.headers.get(\"Content-Type\");\r",
					"        pm.expect(contentType).to.include(\"application/problem+json\");\r",
					"    });\r",
					"\r",
					"    pm.test(\"Response body is not empty\", function () {\r",
					"        const responseBody = pm.response.text();\r",
					"        pm.expect(responseBody).to.not.be.empty;\r",
					"    });\r",
					"};\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ApiPassword",
			"value": ""
		},
		{
			"key": "ApiUser",
			"value": ""
		},
		{
			"key": "Endpoint",
			"value": ""
		},
		{
			"key": "MaxParallel",
			"value": ""
		},
		{
			"key": "DriverBinaries",
			"value": ""
		},
		{
			"key": "ExternalEndpoint",
			"value": ""
		}
	]
}